                  2   $LIST
0000              4   
0000              5   CLK           EQU 22118400 ; Microcontroller system crystal frequency in Hz
0000              6   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave
0000              7   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0000              8   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
0000              9   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0000             10   
0000             11   Time_Speed EQU 100
0000             12   
0000             13   BOOT_BUTTON equ P4.5
0000             14   Button1 equ P2.1
0000             15   Button2 equ P2.1
0000             16   Button3 equ P2.1
0000             17   Button4 equ P2.1
0000             18   
0000             19   
0000             20   SOUND_OUT equ P1.1
0000             21   UPDOWN equ P0.0
0000             22   OvenPin equ P4.6
0000             23   
0000             24   ; Reset vector
0000             25   org 0x0000
<<<<<<< HEAD
0000 02018F      26       ljmp main
=======
0000 020264      26       ljmp main
>>>>>>> parent of cb2abc9 (PWM Working.)
0003             27   
0003             28   ; External interrupt 0 vector (not used in this code)
0003             29   org 0x0003
0003 32          30            reti
0004             31   
0004             32   ; Timer/Counter 0 overflow interrupt vector
000B             33   org 0x000B
000B 020115      34            ljmp Timer0_ISR
000E             35   
000E             36   ; External interrupt 1 vector (not used in this code)
0013             37   org 0x0013
0013 32          38            reti
0014             39   
0014             40   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             41   org 0x001B
001B 32          42            reti
001C             43   
001C             44   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             45   org 0x0023 
0023 32          46            reti
0024             47            
0024             48   ; Timer/Counter 2 overflow interrupt vector
002B             49   org 0x002B
002B 020131      50            ljmp Timer2_ISR
002E             51   
002E             52   ; In the 8051 we can define direct access variables starting at location 0x30 up to location 0x7F
0030             53   dseg at 0x30
0030             54   
0030             55   
0030             56   BCD_counter:  ds 1 ;The BCD counter incrememted in the ISR and displayed in the main loop
0031             57   Count1ms:     ds 2 ;Used to determine when half second has passed
0033             58   
0033             59   mode: ds 1 ;display time mode=0, set time mode=1 or set alarm mode=2.
0034             60   
0034             61   Selected: ds 1 ;0 = hr, 1 = min, 2 = Am/Pm, 3 = Done
0035             62   
0035             63   PowerPercent: ds 1 ; 0 = 0%, 1 = 20% ... 5 = 100%
<<<<<<< HEAD
0036             64   
0036             65   TenthSeconds: ds 1
0037             66   Seconds: ds 1 ;Seconds
0038             67   Minutes: ds 1 ;Minutes
0039             68   
0039             69   AlarmSec: ds 1 ;Seconds Alarm
003A             70   AlarmMin: ds 1 ;Minutes Alarm
003B             71   
003B             72   
003B             73   ; In the 8051 we have variables that are 1-bit in size.  We can use the setb, clr, jb, and jnb
003B             74   ; instructions with these variables.  This is how you define a 1-bit variable:
0000             75   bseg
0000             76   seconds_flag: dbit 1 ; Set to one in the ISR every time 500 ms had passed
0001             77   
0001             78   
002E             79   cseg
002E             80   ; These 'equ' must match the hardware wiring
002E             81   LCD_RS equ P3.2
002E             82   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
002E             83   LCD_E  equ P3.3
002E             84   LCD_D4 equ P3.4
002E             85   LCD_D5 equ P3.5
002E             86   LCD_D6 equ P3.6
002E             87   LCD_D7 equ P3.7
002E             88   
                 90   	$LIST
00DA             92   
00DA             93   ;1234567890123456    <- This helps determine the location of the counter
00DA             94   
00DA 20202020    95   Initial_Message:  db '     :  :       ', 0
=======
0036             64   PowerPercentCount: ds 1
0037             65   
0037             66   TenthSeconds: ds 1
0038             67   Seconds: ds 1 ;Seconds
0039             68   Minutes: ds 1 ;Minutes
003A             69   Hours: ds 1 ;Hours
003B             70   AMPM: ds 1 ;Am/Pm
003C             71   Day: ds 1
003D             72   
003D             73   AlarmMin: ds 1 ;alarm min time
003E             74   AlarmHr: ds 1 ; alarm hour time
003F             75   AlarmAP: ds 1 ; alarm Am/Pm time
0040             76   
0040             77   
0040             78   ; In the 8051 we have variables that are 1-bit in size.  We can use the setb, clr, jb, and jnb
0040             79   ; instructions with these variables.  This is how you define a 1-bit variable:
0000             80   bseg
0000             81   seconds_flag: dbit 1 ; Set to one in the ISR every time 500 ms had passed
0001             82   
0001             83   
002E             84   cseg
002E             85   ; These 'equ' must match the hardware wiring
002E             86   LCD_RS equ P3.2
002E             87   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
002E             88   LCD_E  equ P3.3
002E             89   LCD_D4 equ P3.4
002E             90   LCD_D5 equ P3.5
002E             91   LCD_D6 equ P3.6
002E             92   LCD_D7 equ P3.7
002E             93   
                 95   	$LIST
00DA             97   
00DA             98   ;1234567890123456    <- This helps determine the location of the counter
00DA             99   
00DA 20202020   100   Initial_Message:  db '     :  :       ', 0
>>>>>>> parent of cb2abc9 (PWM Working.)
     203A2020
     3A202020
     20202020
     00
<<<<<<< HEAD
00EB             96   
00EB 20202020    97   CLS: db '                ', 0
=======
00EB 414D00     101   AM: db 'AM', 0
00EE 504D00     102   PM: db 'PM', 0
00F1            103   
00F1            104   
00F1            105   
00F1 4D6F6E00   106   Monday: db 'Mon', 0
00F5 54756500   107   Tuesday: db 'Tue', 0
00F9 57656400   108   Wednesday: db 'Wed', 0
00FD 54687500   109   Thursday: db 'Thu', 0
0101 54756500   110   Friday: db 'Tue', 0
0105 53617400   111   Saturday: db 'Sat', 0
0109 53756E00   112   Sunday: db 'Sun', 0
010D            113   
010D 20202020   114   TimeMsgTop: db '     :  :  Time', 0
     203A2020
     3A202054
     696D6500
011D 20202020   115   AlarmMsgTop: db '     :  :  Alarm', 0
     203A2020
     3A202041
     6C61726D
     00
012E 20202B48   116   MsgBtm: db '  +H +M AP Set  ', 0
     202B4D20
     41502053
     65742020
     00
013F            117   
013F 20202020   118   CLS: db '                ', 0
>>>>>>> parent of cb2abc9 (PWM Working.)
     20202020
     20202020
     20202020
     00
<<<<<<< HEAD
00FC             98   
00FC             99   ;---------------------------------;
00FC            100   ; Routine to initialize the ISR   ;
00FC            101   ; for timer 0                     ;
00FC            102   ;---------------------------------;
00FC            103   Timer0_Init:
00FC E589       104            mov a, TMOD
00FE 54F0       105            anl a, #0xf0 ; 11110000 Clear the bits for timer 0
0100 4401       106            orl a, #0x01 ; 00000001 Configure timer 0 as 16-timer
0102 F589       107            mov TMOD, a
0104 758CEA     108            mov TH0, #high(TIMER0_RELOAD)
0107 758AE8     109            mov TL0, #low(TIMER0_RELOAD)
010A            110            ; Set autoreload value
010A 75F4EA     111            mov RH0, #high(TIMER0_RELOAD)
010D 75F2E8     112            mov RL0, #low(TIMER0_RELOAD)
0110            113            ; Enable the timer and interrupts
0110 D2A9       114       setb ET0  ; Enable timer 0 interrupt
0112 D28C       115       setb TR0  ; Start timer 0
0114 22         116            ret
0115            117   
0115            118   ;---------------------------------;
0115            119   ; ISR for timer 0.  Set to execute;
0115            120   ; every 1/4096Hz to generate a    ;
0115            121   ; 2048 Hz square wave at pin P1.1 ;
0115            122   ;---------------------------------;
0115            123   Timer0_ISR:
0115            124            ;clr TF0  ; According to the data sheet this is done for us already.
0115 B291       125            cpl SOUND_OUT ; Connect speaker to P1.1!
0117 32         126            reti
0118            127   
0118            128   ;---------------------------------;
0118            129   ; Routine to initialize the ISR   ;
0118            130   ; for timer 2                     ;
0118            131   ;---------------------------------;
0118            132   Timer2_Init:
0118 75C800     133            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
011B 75CDA9     134            mov TH2, #high(TIMER2_RELOAD)
011E 75CC9A     135            mov TL2, #low(TIMER2_RELOAD)
0121            136            ; Set the reload value
0121 75CBA9     137            mov RCAP2H, #high(TIMER2_RELOAD)
0124 75CA9A     138            mov RCAP2L, #low(TIMER2_RELOAD)
0127            139            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
0127 E4         140            clr a
0128 F531       141            mov Count1ms+0, a
012A F532       142            mov Count1ms+1, a
012C            143            ; Enable the timer and interrupts
012C D2AD       144       setb ET2  ; Enable timer 2 interrupt
012E D2CA       145       setb TR2  ; Enable timer 2
0130 22         146            ret
0131            147   
0131            148   ;---------------------------------;
0131            149   ; ISR for timer 2                 ;
0131            150   ;---------------------------------;
0131            151   Timer2_ISR:
0131 C2CF       152            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
0133 B290       153            cpl P1.0 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
0135            154            
0135            155            ; The two registers used in the ISR must be saved in the stack
0135 C0E0       156            push acc
0137 C0D0       157            push psw
0139            158            
0139            159            ; Increment the 16-bit one mili second counter
0139 0531       160            inc Count1ms+0    ; Increment the low 8-bits first
013B E531       161            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
013D 7002       162            jnz Inc_Done
013F 0532       163            inc Count1ms+1
0141            164   
0141            165   Inc_Done:
0141            166            ; Check if second has passed
0141 E531       167            mov a, Count1ms+0
0143 B4642D     168            cjne a, #low(Time_Speed), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
0146 E532       169            mov a, Count1ms+1
0148 B40028     170            cjne a, #high(Time_Speed), Timer2_ISR_done
014B            171            
014B            172            ;1000 milliseconds have passed.  Set a flag so the main program knows
014B D200       173            setb seconds_flag ;Let the main program know (Time_Speed) ms have passed
014D            174            
014D            175            ;cpl TR0 ; Enable/disable timer/counter 0. This line creates a beep-silence-beep-silence sound.
014D            176            
014D            177            ; Reset to zero the milli-seconds counter, it is a 16-bit variable
014D E4         178            clr a
014E F531       179            mov Count1ms+0, a
0150 F532       180            mov Count1ms+1, a
0152            181            
0152            182            ;1/10 Second Increment
0152 E536       183            mov     a, TenthSeconds
0154 B40921     184       cjne         a, #0x9, IncTenthSeconds
0157 7400       185       mov          a, #0 
0159 D4         186       da           a
015A F536       187       mov          TenthSeconds, a
015C            188            
015C            189            ;Seconds Increment
015C E537       190            mov     a, Seconds
015E B45924     191            cjne    a, #0x59, IncSeconds ; if Seconds != 59, then seconds++
0161 7400       192       mov          a, #0 
0163 D4         193       da           a
0164 F537       194       mov          Seconds, a
0166            195      
0166            196       
0166 308005     197            jnb UPDOWN, Timer2_ISR_decrement
0169 2401       198            add a, #0x01
016B 020170     199            ljmp Timer2_ISR_da
016E            200            
016E            201   Timer2_ISR_decrement:
016E 2499       202            add a, #0x99 ; Adding the 10-complement of -1 is like subtracting 1.
0170            203   Timer2_ISR_da:
0170 D4         204            da a ; Decimal adjust instruction.  Check datasheet for more details!
0171 F537       205            mov Seconds, a
0173            206            
0173            207   Timer2_ISR_done:
0173 D0D0       208            pop psw
0175 D0E0       209            pop acc
0177 32         210            reti
0178            211   
0178            212   IncTenthSeconds:
0178 2401       213            add a, #0x01
017A D4         214            da a
017B F536       215            mov TenthSeconds, a
017D B535C1     216            cjne a, PowerPercent, Inc_Done
0180 D2A2       217            setb OvenPin
0182 020141     218            ljmp Inc_Done
0185            219   
0185            220   IncSeconds:
0185 C2A2       221            clr OvenPin
0187 2401       222            add a, #0x01
0189 D4         223            da a
018A F537       224            mov Seconds, a
018C 020141     225            ljmp Inc_Done
018F            226            
018F            227   ;---------------------------------;
018F            228   ; Main program. Includes hardware ;
018F            229   ; initialization and 'forever'    ;
018F            230   ; loop.                           ;
018F            231   ;---------------------------------;
018F            232   main:
018F            233            ; Initialization
018F 75817F     234       mov SP, #0x7F
0192 1200FC     235       lcall Timer0_Init
0195 120118     236       lcall Timer2_Init
0198            237       ; In case you decide to use the pins of P0, configure the port in bidirectional mode:
0198 75E600     238       mov P0M0, #0
019B 75E700     239       mov P0M1, #0
019E 753505     240            mov PowerPercent, #5
01A1            241   
01A1 D2AF       242       setb EA  ; Enable Global interrupts
01A3 120088     243       lcall LCD_4BIT
01A6            244            
01A6            245       ; For convenience a few handy macros are included in 'LCD_4bit.inc':
01A6 C0E0       246            push acc
01A8 7401       246            mov a, #1
01AA 14         246            dec a
01AB 1200BF     246            lcall ?Set_Cursor_1 ; Select column and row
01AE D0E0       246            pop acc
01B0 C083       247            push dph
01B2 C082       247            push dpl
01B4 C0E0       247            push acc
01B6 9000DA     247            mov dptr, #Initial_Message
01B9 1200B2     247            lcall ?Send_Constant_String
01BC D0E0       247            pop acc
01BE D082       247            pop dpl
01C0 D083       247            pop dph
01C2 D200       248       setb seconds_flag
01C4            249            ; After initialization the program stays in this 'forever' loop
01C4            250   loop:
01C4 0201C4     251            ljmp loop
01C7            252   
01C7            253   EN
=======
0150            119   
0150            120   ;---------------------------------;
0150            121   ; Routine to initialize the ISR   ;
0150            122   ; for timer 0                     ;
0150            123   ;---------------------------------;
0150            124   Timer0_Init:
0150 E589       125            mov a, TMOD
0152 54F0       126            anl a, #0xf0 ; 11110000 Clear the bits for timer 0
0154 4401       127            orl a, #0x01 ; 00000001 Configure timer 0 as 16-timer
0156 F589       128            mov TMOD, a
0158 758CEA     129            mov TH0, #high(TIMER0_RELOAD)
015B 758AE8     130            mov TL0, #low(TIMER0_RELOAD)
015E            131            ; Set autoreload value
015E 75F4EA     132            mov RH0, #high(TIMER0_RELOAD)
0161 75F2E8     133            mov RL0, #low(TIMER0_RELOAD)
0164            134            ; Enable the timer and interrupts
0164 D2A9       135       setb ET0  ; Enable timer 0 interrupt
0166 D28C       136       setb TR0  ; Start timer 0
0168 22         137            ret
0169            138   
0169            139   ;---------------------------------;
0169            140   ; ISR for timer 0.  Set to execute;
0169            141   ; every 1/4096Hz to generate a    ;
0169            142   ; 2048 Hz square wave at pin P1.1 ;
0169            143   ;---------------------------------;
0169            144   Timer0_ISR:
0169            145            ;clr TF0  ; According to the data sheet this is done for us already.
0169 B291       146            cpl SOUND_OUT ; Connect speaker to P1.1!
016B 32         147            reti
016C            148   
016C            149   ;---------------------------------;
016C            150   ; Routine to initialize the ISR   ;
016C            151   ; for timer 2                     ;
016C            152   ;---------------------------------;
016C            153   Timer2_Init:
016C 75C800     154            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
016F 75CDA9     155            mov TH2, #high(TIMER2_RELOAD)
0172 75CC9A     156            mov TL2, #low(TIMER2_RELOAD)
0175            157            ; Set the reload value
0175 75CBA9     158            mov RCAP2H, #high(TIMER2_RELOAD)
0178 75CA9A     159            mov RCAP2L, #low(TIMER2_RELOAD)
017B            160            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
017B E4         161            clr a
017C F531       162            mov Count1ms+0, a
017E F532       163            mov Count1ms+1, a
0180            164            ; Enable the timer and interrupts
0180 D2AD       165       setb ET2  ; Enable timer 2 interrupt
0182 D2CA       166       setb TR2  ; Enable timer 2
0184 22         167            ret
0185            168   
0185            169   ;---------------------------------;
0185            170   ; ISR for timer 2                 ;
0185            171   ;---------------------------------;
0185            172   Timer2_ISR:
0185 C2CF       173            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
0187 B290       174            cpl P1.0 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
0189            175            
0189            176            ; The two registers used in the ISR must be saved in the stack
0189 C0E0       177            push acc
018B C0D0       178            push psw
018D            179            
018D            180            ; Increment the 16-bit one mili second counter
018D 0531       181            inc Count1ms+0    ; Increment the low 8-bits first
018F E531       182            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
0191 7002       183            jnz Inc_Done
0193 0532       184            inc Count1ms+1
0195            185   
0195            186   Inc_Done:
0195            187            ; Check if second has passed
0195 E531       188            mov a, Count1ms+0
0197 B4644E     189            cjne a, #low(Time_Speed), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
019A E532       190            mov a, Count1ms+1
019C B40049     191            cjne a, #high(Time_Speed), Timer2_ISR_done
019F            192            
019F            193            ;1000 milliseconds have passed.  Set a flag so the main program knows
019F D200       194            setb seconds_flag ;Let the main program know (Time_Speed) ms have passed
01A1            195            
01A1            196            ;cpl TR0 ; Enable/disable timer/counter 0. This line creates a beep-silence-beep-silence sound.
01A1            197            
01A1            198            ; Reset to zero the milli-seconds counter, it is a 16-bit variable
01A1 E4         199            clr a
01A2 F531       200            mov Count1ms+0, a
01A4 F532       201            mov Count1ms+1, a
01A6            202            
01A6            203            ;1/10 Second Increment
01A6 E537       204            mov     a, TenthSeconds
01A8 B40947     205       cjne         a, #0x9, IncTenthSeconds
01AB 7400       206       mov          a, #0 
01AD D4         207       da           a
01AE F537       208       mov          TenthSeconds, a
01B0            209            
01B0            210            ;Seconds Increment
01B0 E538       211            mov     a, Seconds
01B2 B4594F     212       cjne         a, #0x59, IncSeconds ; if Seconds != 59, then seconds++
01B5 7400       213       mov          a, #0 
01B7 D4         214       da           a
01B8 F538       215       mov          Seconds, a
01BA            216       
01BA            217       ;Minutes Increment
01BA E539       218       mov          a, Minutes
01BC B4594F     219       cjne         a, #0x59, IncMinutes
01BF 7400       220       mov          a, #0 
01C1 D4         221       da           a
01C2 F539       222       mov          Minutes, a
01C4 120251     223       lcall CheckAlarm
01C7            224       
01C7            225       ;Hours Increment
01C7 E53A       226       mov          a, Hours
01C9 B41250     227       cjne         a, #0x12, IncHours
01CC 7401       228       mov          a, #1 
01CE D4         229       da           a
01CF F53A       230       mov          Hours, a
01D1            231       
01D1            232       ;Days Increment
01D1 E53C       233       mov a, Day
01D3 B40673     234       cjne a,#0x06, IncDay
01D6 7400       235       mov a, #0
01D8 D4         236       da a
01D9 F53C       237       mov Day, a
01DB            238       
01DB 308005     239            jnb UPDOWN, Timer2_ISR_decrement
01DE 2401       240            add a, #0x01
01E0 0201E5     241            ljmp Timer2_ISR_da
01E3            242            
01E3            243   Timer2_ISR_decrement:
01E3 2499       244            add a, #0x99 ; Adding the 10-complement of -1 is like subtracting 1.
01E5            245   Timer2_ISR_da:
01E5 D4         246            da a ; Decimal adjust instruction.  Check datasheet for more details!
01E6 F538       247            mov Seconds, a
01E8            248            
01E8            249   Timer2_ISR_done:
01E8 D0D0       250            pop psw
01EA D0E0       251            pop acc
01EC 32         252            reti
01ED            253   
01ED            254   OvenOff:
01ED C2C6       255            clr OvenPin
01EF 020195     256            ljmp Inc_Done
01F2            257   
01F2            258   IncTenthSeconds:
01F2 2401       259            add a, #0x01
01F4 D4         260            da a
01F5 F537       261            mov TenthSeconds, a
01F7            262   
01F7 E536       263            mov a, PowerPercentCount
01F9            264   
01F9 2499       265            add a, #0x99
01FB D4         266            da a
01FC F536       267            mov PowerPercentCount, a
01FE B535EC     268            cjne a, PowerPercent, OvenOff
0201            269   
0201 020195     270            ljmp Inc_Done   
0204            271   
0204            272   IncSeconds:
0204 D2C6       273            setb OvenPin
0206 2401       274            add a, #0x01
0208 D4         275            da a
0209 F538       276            mov Seconds, a
020B 020195     277            ljmp Inc_Done
020E            278            
020E            279   IncMinutes:
020E 2401       280            add a, #0x01
0210 D4         281            da a
0211 F539       282            mov Minutes, a
0213 120251     283            lcall CheckAlarm
0216 020195     284            ljmp Inc_Done
0219            285   
0219            286   GoToInc_Done:
0219 020195     287            ljmp Inc_Done
021C            288   
021C            289   IncHours:
021C 2401       290            add a, #0x01
021E D4         291            da a
021F F53A       292            mov Hours, a
0221 E53A       293            mov a, Hours
0223 B412F3     294            cjne a, #0x12, GoToInc_Done
0226            295            
0226 E53B       296            mov a, AMPM     
0228 B40116     297            cjne a, #0x01, IncAMPM
022B 7400       298            mov a, #0x00
022D F53B       299            mov AMPM, a
022F E53C       300            mov a, Day
0231 B40706     301            cjne a, #0x07, Next
0234 753C00     302                    mov Day, #0x00
0237 020195     303                    ljmp Inc_Done
023A            304            Next:
023A 2401       305            add a, #0x01
023C F53C       306            mov Day, a
023E 020195     307            ljmp Inc_Done
0241            308            
0241            309   IncAMPM:
0241 2401       310            add a, #0x01
0243 D4         311            da a
0244 F53B       312            mov AMPM, a
0246 020195     313            ljmp Inc_Done
0249            314            
0249            315   IncDay:
0249 2400       316            add a, #0x00
024B D4         317            da a
024C F53B       318            mov AMPM, a
024E 020195     319            ljmp Inc_Done
0251            320            
0251            321   CheckAlarm: ;Checks if Alarm = Time
0251 E539       322            mov a, Minutes
0253 B53D0D     323            cjne a, AlarmMin, TimeNotAlarm
0256 E53A       324            mov a, Hours
0258 B53E08     325            cjne a, AlarmHr, TimeNotAlarm
025B E53B       326            mov a, AMPM
025D B53B03     327            cjne a, AMPM, TimeNotAlarm
0260 D28C       328            setb TR0
0262 22         329            ret
0263            330            TimeNotAlarm:
0263 22         331                    ret
0264            332            
0264            333   ;---------------------------------;
0264            334   ; Main program. Includes hardware ;
0264            335   ; initialization and 'forever'    ;
0264            336   ; loop.                           ;
0264            337   ;---------------------------------;
0264            338   main:
0264            339            ; Initialization
0264 75817F     340       mov SP, #0x7F
0267 120150     341       lcall Timer0_Init
026A 12016C     342       lcall Timer2_Init
026D            343       ; In case you decide to use the pins of P0, configure the port in bidirectional mode:
026D 75E600     344       mov P0M0, #0
0270 75E700     345       mov P0M1, #0
0273 753605     346            mov PowerPercentCount, #5
0276            347       
0276 D28C       348       setb TR0
0278            349   
0278 D2AF       350       setb EA  ; Enable Global interrupts
027A 120088     351       lcall LCD_4BIT
027D            352            
027D            353       ; For convenience a few handy macros are included in 'LCD_4bit.inc':
027D C0E0       354            push acc
027F 7401       354            mov a, #1
0281 14         354            dec a
0282 1200BF     354            lcall ?Set_Cursor_1 ; Select column and row
0285 D0E0       354            pop acc
0287 C083       355            push dph
0289 C082       355            push dpl
028B C0E0       355            push acc
028D 9000DA     355            mov dptr, #Initial_Message
0290 1200B2     355            lcall ?Send_Constant_String
0293 D0E0       355            pop acc
0295 D082       355            pop dpl
0297 D083       355            pop dph
0299 D200       356       setb seconds_flag
029B            357            ; After initialization the program stays in this 'forever' loop
029B            358   loop:
029B 20A11C     359            jb Button1, CheckButton2
029E C002       360            push AR2
02A0 7A32       360            mov R2, #50
02A2 120039     360            lcall ?Wait_Milli_Seconds
02A5 D002       360            pop AR2
02A7 20A110     361            jb Button1, CheckButton2 
02AA 30A1FD     362            jnb Button1, $
02AD 308C05     363            jnb TR0, GoToSetTime
02B0 C28C       364            clr TR0 ;;;TURNS OFF SPEAKER
02B2 02029B     365            ljmp loop
02B5            366            GoToSetTime:
02B5 C2CA       367                    clr TR2 
02B7 020455     368                    ljmp ModeSetTime
02BA            369   
02BA            370   CheckButton2:
02BA 20A120     371            jb Button2, loop_a
02BD C002       372            push AR2
02BF 7A32       372            mov R2, #50
02C1 120039     372            lcall ?Wait_Milli_Seconds
02C4 D002       372            pop AR2
02C6 20A114     373            jb Button2, loop_a
02C9 30A1FD     374            jnb Button2, $
02CC 308C0B     375            jnb TR0, GoToSetAlarm
02CF C28C       376            clr TR0
02D1 E539       377            mov a, Minutes
02D3 2401       378            add a, #0x01
02D5 F53D       379            mov AlarmMin, a
02D7 02029B     380            ljmp loop
02DA            381            GoToSetAlarm:
02DA 0205AA     382                    ljmp SetAlarm
02DD            383   
02DD            384   loop_a:
02DD 3000BB     385            jnb seconds_flag, loop
02E0            386   loop_b:
02E0 C200       387       clr seconds_flag 
02E2 C0E0       388            push acc
02E4 7401       388            mov a, #1
02E6 14         388            dec a
02E7 1200BF     388            lcall ?Set_Cursor_1 ; Select column and row
02EA D0E0       388            pop acc
02EC C083       389            push dph
02EE C082       389            push dpl
02F0 C0E0       389            push acc
02F2 9000DA     389            mov dptr, #Initial_Message
02F5 1200B2     389            lcall ?Send_Constant_String
02F8 D0E0       389            pop acc
02FA D082       389            pop dpl
02FC D083       389            pop dph
02FE C0E0       390            push acc
0300 740A       390            mov a, #10
0302 14         390            dec a
0303 1200BF     390            lcall ?Set_Cursor_1 ; Select column and row
0306 D0E0       390            pop acc   
0308 C000       391            push ar0
030A A838       391            mov r0, Seconds
030C 1200C4     391            lcall ?Display_BCD
030F D000       391            pop ar0 
0311 C0E0       392            push acc
0313 7407       392            mov a, #7
0315 14         392            dec a
0316 1200BF     392            lcall ?Set_Cursor_1 ; Select column and row
0319 D0E0       392            pop acc
031B C000       393            push ar0
031D A839       393            mov r0, Minutes
031F 1200C4     393            lcall ?Display_BCD
0322 D000       393            pop ar0
0324 C0E0       394            push acc
0326 7404       394            mov a, #4
0328 14         394            dec a
0329 1200BF     394            lcall ?Set_Cursor_1 ; Select column and row
032C D0E0       394            pop acc
032E C000       395            push ar0
0330 A83A       395            mov r0, Hours
0332 1200C4     395            lcall ?Display_BCD
0335 D000       395            pop ar0
0337 C0E0       396            push acc
0339 740C       396            mov a, #12
033B 14         396            dec a
033C 1200BF     396            lcall ?Set_Cursor_1 ; Select column and row
033F D0E0       396            pop acc
0341            397            
0341 E53C       398            mov a, Day
0343            399            
0343 B4001C     400            cjne a, #0x00, NotMon
0346 C0E0       401            push acc
0348 7407       401            mov a, #7
034A 14         401            dec a
034B 1200BD     401            lcall ?Set_Cursor_2 ; Select column and row
034E D0E0       401            pop acc
0350 C083       402            push dph
0352 C082       402            push dpl
0354 C0E0       402            push acc
0356 9000F1     402            mov dptr, #Monday
0359 1200B2     402            lcall ?Send_Constant_String
035C D0E0       402            pop acc
035E D082       402            pop dpl
0360 D083       402            pop dph
0362            403            NotMon:
0362 B4011C     404            cjne a, #0x01, NotTue
0365 C0E0       405            push acc
0367 7407       405            mov a, #7
0369 14         405            dec a
036A 1200BD     405            lcall ?Set_Cursor_2 ; Select column and row
036D D0E0       405            pop acc
036F C083       406            push dph
0371 C082       406            push dpl
0373 C0E0       406            push acc
0375 9000F5     406            mov dptr, #Tuesday
0378 1200B2     406            lcall ?Send_Constant_String
037B D0E0       406            pop acc
037D D082       406            pop dpl
037F D083       406            pop dph
0381            407            NotTue:
0381 B4021C     408            cjne a, #0x02, NotWed
0384 C0E0       409            push acc
0386 7407       409            mov a, #7
0388 14         409            dec a
0389 1200BD     409            lcall ?Set_Cursor_2 ; Select column and row
038C D0E0       409            pop acc
038E C083       410            push dph
0390 C082       410            push dpl
0392 C0E0       410            push acc
0394 9000F9     410            mov dptr, #Wednesday
0397 1200B2     410            lcall ?Send_Constant_String
039A D0E0       410            pop acc
039C D082       410            pop dpl
039E D083       410            pop dph
03A0            411            NotWed:
03A0 B4031C     412            cjne a, #0x03, NotThu
03A3 C0E0       413            push acc
03A5 7407       413            mov a, #7
03A7 14         413            dec a
03A8 1200BD     413            lcall ?Set_Cursor_2 ; Select column and row
03AB D0E0       413            pop acc
03AD C083       414            push dph
03AF C082       414            push dpl
03B1 C0E0       414            push acc
03B3 9000FD     414            mov dptr, #Thursday
03B6 1200B2     414            lcall ?Send_Constant_String
03B9 D0E0       414            pop acc
03BB D082       414            pop dpl
03BD D083       414            pop dph
03BF            415            NotThu:
03BF B4041C     416            cjne a, #0x04, NotFri
03C2 C0E0       417            push acc
03C4 7407       417            mov a, #7
03C6 14         417            dec a
03C7 1200BD     417            lcall ?Set_Cursor_2 ; Select column and row
03CA D0E0       417            pop acc
03CC C083       418            push dph
03CE C082       418            push dpl
03D0 C0E0       418            push acc
03D2 900101     418            mov dptr, #Friday
03D5 1200B2     418            lcall ?Send_Constant_String
03D8 D0E0       418            pop acc
03DA D082       418            pop dpl
03DC D083       418            pop dph
03DE            419            NotFri:
03DE B4051C     420            cjne a, #0x05, NotSat
03E1 C0E0       421            push acc
03E3 7407       421            mov a, #7
03E5 14         421            dec a
03E6 1200BD     421            lcall ?Set_Cursor_2 ; Select column and row
03E9 D0E0       421            pop acc
03EB C083       422            push dph
03ED C082       422            push dpl
03EF C0E0       422            push acc
03F1 900105     422            mov dptr, #Saturday
03F4 1200B2     422            lcall ?Send_Constant_String
03F7 D0E0       422            pop acc
03F9 D082       422            pop dpl
03FB D083       422            pop dph
03FD            423            NotSat:
03FD B4061C     424            cjne a, #0x06, NotSun
0400 C0E0       425            push acc
0402 7407       425            mov a, #7
0404 14         425            dec a
0405 1200BD     425            lcall ?Set_Cursor_2 ; Select column and row
0408 D0E0       425            pop acc
040A C083       426            push dph
040C C082       426            push dpl
040E C0E0       426            push acc
0410 900109     426            mov dptr, #Sunday
0413 1200B2     426            lcall ?Send_Constant_String
0416 D0E0       426            pop acc
0418 D082       426            pop dpl
041A D083       426            pop dph
041C            427            NotSun:
041C            428            
041C C0E0       429            push acc
041E 740C       429            mov a, #12
0420 14         429            dec a
0421 1200BF     429            lcall ?Set_Cursor_1 ; Select column and row
0424 D0E0       429            pop acc
0426 E53B       430            mov a, AMPM
0428 B40015     431            cjne a, #0x00, WritePM
042B C083       432            push dph
042D C082       432            push dpl
042F C0E0       432            push acc
0431 9000EB     432            mov dptr, #AM
0434 1200B2     432            lcall ?Send_Constant_String
0437 D0E0       432            pop acc
0439 D082       432            pop dpl
043B D083       432            pop dph
043D 02029B     433            ljmp loop
0440            434            WritePM:
0440 C083       435            push dph
0442 C082       435            push dpl
0444 C0E0       435            push acc
0446 9000EE     435            mov dptr, #PM
0449 1200B2     435            lcall ?Send_Constant_String
044C D0E0       435            pop acc
044E D082       435            pop dpl
0450 D083       435            pop dph
0452 02029B     436       ljmp loop
0455            437            
0455            438   ModeSetTime:
0455 C0E0       439            push acc
0457 7401       439            mov a, #1
0459 14         439            dec a
045A 1200BF     439            lcall ?Set_Cursor_1 ; Select column and row
045D D0E0       439            pop acc
045F C083       440            push dph
0461 C082       440            push dpl
0463 C0E0       440            push acc
0465 90010D     440            mov dptr, #TimeMsgTop
0468 1200B2     440            lcall ?Send_Constant_String
046B D0E0       440            pop acc
046D D082       440            pop dpl
046F D083       440            pop dph
0471 C0E0       441            push acc
0473 7401       441            mov a, #1
0475 14         441            dec a
0476 1200BD     441            lcall ?Set_Cursor_2 ; Select column and row
0479 D0E0       441            pop acc
047B C083       442            push dph
047D C082       442            push dpl
047F C0E0       442            push acc
0481 90012E     442            mov dptr, #MsgBtm
0484 1200B2     442            lcall ?Send_Constant_String
0487 D0E0       442            pop acc
0489 D082       442            pop dpl
048B D083       442            pop dph
048D C0E0       443            push acc
048F 7407       443            mov a, #7
0491 14         443            dec a
0492 1200BF     443            lcall ?Set_Cursor_1 ; Select column and row
0495 D0E0       443            pop acc
0497 C000       444            push ar0
0499 A839       444            mov r0, Minutes
049B 1200C4     444            lcall ?Display_BCD
049E D000       444            pop ar0
04A0 C0E0       445            push acc
04A2 7404       445            mov a, #4
04A4 14         445            dec a
04A5 1200BF     445            lcall ?Set_Cursor_1 ; Select column and row
04A8 D0E0       445            pop acc
04AA C000       446            push ar0
04AC A83A       446            mov r0, Hours
04AE 1200C4     446            lcall ?Display_BCD
04B1 D000       446            pop ar0
04B3 C0E0       447            push acc
04B5 7409       447            mov a, #9
04B7 14         447            dec a
04B8 1200BF     447            lcall ?Set_Cursor_1 ; Select column and row
04BB D0E0       447            pop acc
04BD E53B       448            mov a, AMPM
04BF B40015     449            cjne a, #0x00, WritePM1
04C2 C083       450            push dph
04C4 C082       450            push dpl
04C6 C0E0       450            push acc
04C8 9000EB     450            mov dptr, #AM
04CB 1200B2     450            lcall ?Send_Constant_String
04CE D0E0       450            pop acc
04D0 D082       450            pop dpl
04D2 D083       450            pop dph
04D4 0204E9     451            ljmp SetTimeA
04D7            452            WritePM1:
04D7 C083       453            push dph
04D9 C082       453            push dpl
04DB C0E0       453            push acc
04DD 9000EE     453            mov dptr, #PM
04E0 1200B2     453            lcall ?Send_Constant_String
04E3 D0E0       453            pop acc
04E5 D082       453            pop dpl
04E7 D083       453            pop dph
04E9            454   SetTimeA:
04E9 20A123     455            jb Button1, SetTimeB  ; if the 'BOOT' button is not pressed skip
04EC C002       456            push AR2
04EE 7A32       456            mov R2, #50
04F0 120039     456            lcall ?Wait_Milli_Seconds
04F3 D002       456            pop AR2         ; Debounce delay.  This macro is also in 'LCD_4bit.inc'
04F5 20A117     457            jb Button1, SetTimeB  ; if the 'BOOT' button is not pressed skip
04F8 30A1FD     458            jnb Button1, $          ; Wait for button release.  The '$' means: jump to same instruction.
04FB            459            
04FB E53A       460            mov a, Hours
04FD B41207     461            cjne a, #0x12, HoursPlus1
0500 7401       462            mov a, #0x01
0502 F53A       463            mov Hours, a
0504 020455     464            ljmp ModeSetTime
0507            465   
0507            466   HoursPlus1:
0507 2401       467            add a, #0x01
0509 D4         468            da a
050A F53A       469            mov Hours, a
050C 020455     470            ljmp ModeSetTime
050F            471            
050F            472   SetTimeB:
050F 20A172     473            jb Button2, SetTimeC  
0512 C002       474            push AR2
0514 7A32       474            mov R2, #50
0516 120039     474            lcall ?Wait_Milli_Seconds
0519 D002       474            pop AR2         
051B 20A166     475            jb Button2, SetTimeC  
051E 30A1FD     476            jnb Button2, $
0521            477            
0521 E539       478            mov a, Minutes
0523 B45956     479            cjne a, #0x59, MinPlus1
0526 7400       480            mov a, #0x00
0528 F539       481            mov Minutes, a
052A 020455     482            ljmp ModeSetTime
052D            483            
052D            484   SetTimeD:
052D 20A1B9     485            jb Button4, SetTimeA  
0530 C002       486            push AR2
0532 7A32       486            mov R2, #50
0534 120039     486            lcall ?Wait_Milli_Seconds
0537 D002       486            pop AR2         
0539 20A1AD     487            jb Button4, SetTimeA 
053C 30A1FD     488            jnb Button4, $
053F C0E0       489            push acc
0541 7401       489            mov a, #1
0543 14         489            dec a
0544 1200BF     489            lcall ?Set_Cursor_1 ; Select column and row
0547 D0E0       489            pop acc
0549 C083       490            push dph
054B C082       490            push dpl
054D C0E0       490            push acc
054F 9000DA     490            mov dptr, #Initial_Message
0552 1200B2     490            lcall ?Send_Constant_String
0555 D0E0       490            pop acc
0557 D082       490            pop dpl
0559 D083       490            pop dph
055B C0E0       491            push acc
055D 7401       491            mov a, #1
055F 14         491            dec a
0560 1200BD     491            lcall ?Set_Cursor_2 ; Select column and row
0563 D0E0       491            pop acc
0565 C083       492            push dph
0567 C082       492            push dpl
0569 C0E0       492            push acc
056B 90013F     492            mov dptr, #CLS
056E 1200B2     492            lcall ?Send_Constant_String
0571 D0E0       492            pop acc
0573 D082       492            pop dpl
0575 D083       492            pop dph
0577 D2CA       493            setb TR2
0579 0202E0     494            ljmp loop_b
057C            495   MinPlus1:
057C 2401       496            add a, #0x01
057E D4         497            da a
057F F539       498            mov Minutes, a
0581 020455     499            ljmp ModeSetTime
0584            500   SetTimeC:
0584 20A1A6     501            jb Button3, SetTimeD  
0587 C002       502            push AR2
0589 7A32       502            mov R2, #50
058B 120039     502            lcall ?Wait_Milli_Seconds
058E D002       502            pop AR2         
0590 20A19A     503            jb Button3, SetTimeD  
0593 30A1FD     504            jnb Button3, $
0596            505            
0596 E53B       506            mov a, AMPM
0598 B40107     507            cjne a, #0x01, APPlus1
059B 7400       508            mov a, #0x00
059D F53B       509            mov AMPM, a
059F 020455     510            ljmp ModeSetTime
05A2            511   APPlus1:
05A2 2401       512            add a, #0x01
05A4 D4         513            da a
05A5 F53B       514            mov AMPM, a
05A7 020455     515            ljmp ModeSetTime
05AA            516   
05AA            517   SetAlarm:
05AA C0E0       518            push acc
05AC 7401       518            mov a, #1
05AE 14         518            dec a
05AF 1200BF     518            lcall ?Set_Cursor_1 ; Select column and row
05B2 D0E0       518            pop acc
05B4 C083       519            push dph
05B6 C082       519            push dpl
05B8 C0E0       519            push acc
05BA 90011D     519            mov dptr, #AlarmMsgTop
05BD 1200B2     519            lcall ?Send_Constant_String
05C0 D0E0       519            pop acc
05C2 D082       519            pop dpl
05C4 D083       519            pop dph
05C6 C0E0       520            push acc
05C8 7401       520            mov a, #1
05CA 14         520            dec a
05CB 1200BD     520            lcall ?Set_Cursor_2 ; Select column and row
05CE D0E0       520            pop acc
05D0            520   
05D0 C083       521            push dph
05D2 C082       521            push dpl
05D4 C0E0       521            push acc
05D6 90012E     521            mov dptr, #MsgBtm
05D9 1200B2     521            lcall ?Send_Constant_String
05DC D0E0       521            pop acc
05DE D082       521            pop dpl
05E0 D083       521            pop dph
05E2 C0E0       522            push acc
05E4 7407       522            mov a, #7
05E6 14         522            dec a
05E7 1200BF     522            lcall ?Set_Cursor_1 ; Select column and row
05EA D0E0       522            pop acc
05EC C000       523            push ar0
05EE A83D       523            mov r0, AlarmMin
05F0 1200C4     523            lcall ?Display_BCD
05F3 D000       523            pop ar0
05F5 C0E0       524            push acc
05F7 7404       524            mov a, #4
05F9 14         524            dec a
05FA 1200BF     524            lcall ?Set_Cursor_1 ; Select column and row
05FD D0E0       524            pop acc
05FF C000       525            push ar0
0601 A83E       525            mov r0, AlarmHr
0603 1200C4     525            lcall ?Display_BCD
0606 D000       525            pop ar0
0608 C0E0       526            push acc
060A 7409       526            mov a, #9
060C 14         526            dec a
060D 1200BF     526            lcall ?Set_Cursor_1 ; Select column and row
0610 D0E0       526            pop acc
0612 E53F       527            mov a, AlarmAP
0614 B40015     528            cjne a, #0x00, WritePM2
0617 C083       529            push dph
0619 C082       529            push dpl
061B C0E0       529            push acc
061D 9000EB     529            mov dptr, #AM
0620 1200B2     529            lcall ?Send_Constant_String
0623 D0E0       529            pop acc
0625 D082       529            pop dpl
0627 D083       529            pop dph
0629 02063E     530            ljmp AlarmA
062C            531            WritePM2:
062C C083       532            push dph
062E C082       532            push dpl
0630 C0E0       532            push acc
0632 9000EE     532            mov dptr, #PM
0635 1200B2     532            lcall ?Send_Constant_String
0638 D0E0       532            pop acc
063A D082       532            pop dpl
063C D083       532            pop dph         
063E            533   AlarmA:
063E 20A123     534            jb Button1, AlarmB
0641 C002       535            push AR2
0643 7A32       535            mov R2, #50
0645 120039     535            lcall ?Wait_Milli_Seconds
0648 D002       535            pop AR2
064A 20A117     536            jb Button1, AlarmB
064D 30A1FD     537            jnb Button1, $
0650 E53E       538            mov a, AlarmHr
0652 B41207     539            cjne a, #0x12, AHoursPlus1
0655 7401       540            mov a, #0x01
0657 F53E       541            mov AlarmHr, a
0659 0205AA     542            ljmp SetAlarm
065C            543   AHoursPlus1:
065C 2401       544            add a, #0x01
065E D4         545            da a
065F F53E       546            mov AlarmHr, a
0661 0205AA     547            ljmp SetAlarm
0664            548            
0664            549   AlarmB:
0664 20A123     550            jb Button2, AlarmC
0667 C002       551            push AR2
0669 7A32       551            mov R2, #50
066B 120039     551            lcall ?Wait_Milli_Seconds
066E D002       551            pop AR2
0670 20A117     552            jb Button2, AlarmC
0673 30A1FD     553            jnb Button2, $
0676 E53D       554            mov a, AlarmMin
0678 B45907     555            cjne a, #0x59, AMinPlus1
067B 7400       556            mov a, #0x00
067D F53D       557            mov AlarmMin, a
067F 0205AA     558            ljmp SetAlarm
0682            559   AMinPlus1:
0682 2401       560            add a, #0x01
0684 D4         561            da a
0685 F53D       562            mov AlarmMin, a
0687 0205AA     563            ljmp SetAlarm
068A            564            
068A            565   AlarmC:
068A 20A123     566            jb Button3, AlarmD
068D C002       567            push AR2
068F 7A32       567            mov R2, #50
0691 120039     567            lcall ?Wait_Milli_Seconds
0694 D002       567            pop AR2
0696 20A117     568            jb Button3, AlarmD
0699 30A1FD     569            jnb Button3, $
069C E53F       570            mov a, AlarmAP
069E B40107     571            cjne a, #0x01, AAPPlus1
06A1 7400       572            mov a, #0x00
06A3 F53F       573            mov AlarmAP, a
06A5 0205AA     574            ljmp SetAlarm
06A8            575   AAPPlus1:
06A8 2401       576            add a, #0x01
06AA D4         577            da a
06AB F53F       578            mov AlarmAP, a
06AD 0205AA     579            ljmp SetAlarm
06B0            580   
06B0            581   AlarmD:
06B0 20A14A     582            jb Button4, GoToAlarmA
06B3 C002       583            push AR2
06B5 7A32       583            mov R2, #50
06B7 120039     583            lcall ?Wait_Milli_Seconds
06BA D002       583            pop AR2         
06BC 20A13E     584            jb Button4, GoToAlarmA
06BF 30A1FD     585            jnb Button4, $
06C2 C0E0       586            push acc
06C4 7401       586            mov a, #1
06C6 14         586            dec a
06C7 1200BF     586            lcall ?Set_Cursor_1 ; Select column and row
06CA D0E0       586            pop acc
06CC C083       587            push dph
06CE C082       587            push dpl
06D0 C0E0       587            push acc
06D2 9000DA     587            mov dptr, #Initial_Message
06D5 1200B2     587            lcall ?Send_Constant_String
06D8 D0E0       587            pop acc
06DA D082       587            pop dpl
06DC D083       587            pop dph
06DE C0E0       588            push acc
06E0 7401       588            mov a, #1
06E2 14         588            dec a
06E3 1200BD     588            lcall ?Set_Cursor_2 ; Select column and row
06E6 D0E0       588            pop acc
06E8 C083       589            push dph
06EA C082       589            push dpl
06EC C0E0       589            push acc
06EE 90013F     589            mov dptr, #CLS
06F1 1200B2     589            lcall ?Send_Constant_String
06F4 D0E0       589            pop acc
06F6 D082       589            pop dpl
06F8 D083       589            pop dph
06FA 0202E0     590            ljmp loop_b
06FD            591            
06FD            592   GoToAlarmA:
06FD 02063E     593            ljmp AlarmA
0700            594   EN
>>>>>>> parent of cb2abc9 (PWM Working.)
