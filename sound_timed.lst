                 -1   $MODLP51RC2
0000              1   ;--------------------------------------------------------
0000              2   ; Register and bit definitions for the AT89LP51RC2/RB2
0000              3   ;--------------------------------------------------------
0000              4   ; Special Function Registers
0000              5   ;--------------------------------------------------------
0000              6   ACC            DATA 0xe0
0000              7   B              DATA 0xf0
0000              8   PSW            DATA 0xd0
0000              9   SP             DATA 0x81
0000             10   SPX            DATA 0xef
0000             11   DPL            DATA 0x82
0000             12   DPH            DATA 0x83
0000             13   DPLB           DATA 0xd4
0000             14   DPHB           DATA 0xd5
0000             15   PAGE           DATA 0xf6
0000             16   AX             DATA 0xe1
0000             17   BX             DATA 0xf7
0000             18   DSPR           DATA 0xe2
0000             19   FIRD           DATA 0xe3
0000             20   MACL           DATA 0xe4
0000             21   MACH           DATA 0xe5
0000             22   PCON           DATA 0x87
0000             23   AUXR           DATA 0x8e
0000             24   AUXR1          DATA 0xa2
0000             25   DPCF           DATA 0xa1
0000             26   CKRL           DATA 0x97
0000             27   CKCKON0        DATA 0x8f
0000             28   CKCKON1        DATA 0xaf
0000             29   CKSEL          DATA 0x85
0000             30   CLKREG         DATA 0xae
0000             31   OSCCON         DATA 0x86
0000             32   IE             DATA 0xa8
0000             33   IEN0           DATA 0xa8
0000             34   IEN1           DATA 0xb1
0000             35   IPH0           DATA 0xb7
0000             36   IP             DATA 0xb8
0000             37   IPL0           DATA 0xb8
0000             38   IPH1           DATA 0xb3
0000             39   IPL1           DATA 0xb2
0000             40   P0             DATA 0x80
0000             41   P1             DATA 0x90
0000             42   P2             DATA 0xa0
0000             43   P3             DATA 0xb0
0000             44   P4             DATA 0xc0
0000             45   P0M0           DATA 0xe6
0000             46   P0M1           DATA 0xe7
0000             47   P1M0           DATA 0xd6
0000             48   P1M1           DATA 0xd7
0000             49   P2M0           DATA 0xce
0000             50   P2M1           DATA 0xcf
0000             51   P3M0           DATA 0xc6
0000             52   P3M1           DATA 0xc7
0000             53   P4M0           DATA 0xbe
0000             54   P4M1           DATA 0xbf
0000             55   SCON           DATA 0x98
0000             56   SBUF           DATA 0x99
0000             57   SADEN          DATA 0xb9
0000             58   SADDR          DATA 0xa9
0000             59   BDRCON         DATA 0x9b
0000             60   BRL            DATA 0x9a
0000             61   TCON           DATA 0x88
0000             62   TMOD           DATA 0x89
0000             63   TCONB          DATA 0x91
0000             64   TL0            DATA 0x8a
0000             65   TH0            DATA 0x8c
0000             66   TL1            DATA 0x8b
0000             67   TH1            DATA 0x8d
0000             68   RL0            DATA 0xf2
0000             69   RL1            DATA 0xf3
0000             70   RH0            DATA 0xf4
0000             71   RH1            DATA 0xf5
0000             72   WDTRST         DATA 0xa6
0000             73   WDTPRG         DATA 0xa7
0000             74   T2CON          DATA 0xc8
0000             75   T2MOD          DATA 0xc9
0000             76   RCAP2H         DATA 0xcb
0000             77   RCAP2L         DATA 0xca
0000             78   TH2            DATA 0xcd
0000             79   TL2            DATA 0xcc
0000             80   SPCON          DATA 0xc3
0000             81   SPSTA          DATA 0xc4
0000             82   SPDAT          DATA 0xc5
0000             83   SSCON          DATA 0x93
0000             84   SSCS           DATA 0x94
0000             85   SSDAT          DATA 0x95
0000             86   SSADR          DATA 0x96
0000             87   KBLS           DATA 0x9c
0000             88   KBE            DATA 0x9d
0000             89   KBF            DATA 0x9e
0000             90   KBMOD          DATA 0x9f
0000             91   BMSEL          DATA 0x92
0000             92   FCON           DATA 0xd1
0000             93   EECON          DATA 0xd2
0000             94   ACSRA          DATA 0xa3
0000             95   ACSRB          DATA 0xab
0000             96   AREF           DATA 0xbd
0000             97   DADC           DATA 0xa4
0000             98   DADI           DATA 0xa5
0000             99   DADL           DATA 0xac
0000            100   DADH           DATA 0xad
0000            101   CCON           DATA 0xd8
0000            102   CMOD           DATA 0xd9
0000            103   CL             DATA 0xe9
0000            104   CH             DATA 0xf9
0000            105   CCAPM0         DATA 0xda
0000            106   CCAPM1         DATA 0xdb
0000            107   CCAPM2         DATA 0xdc
0000            108   CCAPM3         DATA 0xdd
0000            109   CCAPM4         DATA 0xde
0000            110   CCAP0H         DATA 0xfa
0000            111   CCAP1H         DATA 0xfb
0000            112   CCAP2H         DATA 0xfc
0000            113   CCAP3H         DATA 0xfd
0000            114   CCAP4H         DATA 0xfe
0000            115   CCAP0L         DATA 0xea
0000            116   CCAP1L         DATA 0xeb
0000            117   CCAP2L         DATA 0xec
0000            118   CCAP3L         DATA 0xed
0000            119   CCAP4L         DATA 0xee
0000            120   ;--------------------------------------------------------
0000            121   ; special function bits
0000            122   ;--------------------------------------------------------
0000            123   P              BIT 0xd0
0000            124   F1             BIT 0xd1
0000            125   OV             BIT 0xd2
0000            126   RS0            BIT 0xd3
0000            127   RS1            BIT 0xd4
0000            128   F0             BIT 0xd5
0000            129   AC             BIT 0xd6
0000            130   CY             BIT 0xd7
0000            131   EX0            BIT 0xa8
0000            132   ET0            BIT 0xa9
0000            133   EX1            BIT 0xaa
0000            134   ET1            BIT 0xab
0000            135   ES             BIT 0xac
0000            136   ET2            BIT 0xad
0000            137   EC             BIT 0xae
0000            138   EA             BIT 0xaf
0000            139   PX0            BIT 0xb8
0000            140   PT0            BIT 0xb9
0000            141   PX1            BIT 0xba
0000            142   PT1            BIT 0xbb
0000            143   PS             BIT 0xbc
0000            144   PT2            BIT 0xbd
0000            145   IP0D           BIT 0xbf
0000            146   PPCL           BIT 0xbe
0000            147   PT2L           BIT 0xbd
0000            148   PLS            BIT 0xbc
0000            149   PT1L           BIT 0xbb
0000            150   PX1L           BIT 0xba
0000            151   PT0L           BIT 0xb9
0000            152   PX0L           BIT 0xb8
0000            153   RXD            BIT 0xb0
0000            154   TXD            BIT 0xb1
0000            155   INT0           BIT 0xb2
0000            156   INT1           BIT 0xb3
0000            157   T0             BIT 0xb4
0000            158   T1             BIT 0xb5
0000            159   WR             BIT 0xb6
0000            160   RD             BIT 0xb7
0000            161   RI             BIT 0x98
0000            162   TI             BIT 0x99
0000            163   RB8            BIT 0x9a
0000            164   TB8            BIT 0x9b
0000            165   REN            BIT 0x9c
0000            166   SM2            BIT 0x9d
0000            167   SM1            BIT 0x9e
0000            168   SM0            BIT 0x9f
0000            169   IT0            BIT 0x88
0000            170   IE0            BIT 0x89
0000            171   IT1            BIT 0x8a
0000            172   IE1            BIT 0x8b
0000            173   TR0            BIT 0x8c
0000            174   TF0            BIT 0x8d
0000            175   TR1            BIT 0x8e
0000            176   TF1            BIT 0x8f
0000            177   CP_RL2         BIT 0xc8
0000            178   C_T2           BIT 0xc9
0000            179   TR2            BIT 0xca
0000            180   EXEN2          BIT 0xcb
0000            181   TCLK           BIT 0xcc
0000            182   RCLK           BIT 0xcd
0000            183   EXF2           BIT 0xce
0000            184   TF2            BIT 0xcf
0000            185   CF             BIT 0xdf
0000            186   CR             BIT 0xde
0000            187   CCF4           BIT 0xdc
0000            188   CCF3           BIT 0xdb
0000            189   CCF2           BIT 0xda
0000            190   CCF1           BIT 0xd9
0000            191   CCF0           BIT 0xd8
0000              2   
0000              3   org 0000H
0000 02090A       4      ljmp MainProgram1
0003              5   ; External interrupt 0 vector (not used in this code)
0003              6   org 0x0003
0003 32           7            reti
0004              8   ; External interrupt 1 vector (not used in this code)
0013              9   org 0x0013
0013 32          10            reti
001B             11   org 0x001B ; Timer/Counter 1 overflow interrupt vector. Used in this code to replay the wave file.
001B 020383      12            ljmp Timer1_ISR
001E             13   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             14   org 0x0023 
0023 32          15            reti
0024             16   ; Timer/Counter 2 overflow interrupt vector
002B             17   org 0x002B
002B 0204B2      18            ljmp Timer2_ISR
002E             19   
002E             20   ;-------------------------------------------;
002E             21   ;              Pin Assignments              ;
002E             22   ;-------------------------------------------;
002E             23   CLK                  EQU 22118400
002E             24   BAUD                 equ 115200
002E             25   BRG_VAL             equ (0x100-(CLK/(16*BAUD)))
002E             26   TIMER1_RATE         EQU 22050     ; 22050Hz is the sampling rate of the wav file we are playing
002E             27   TIMER1_RELOAD       EQU 0x10000-(CLK/TIMER1_RATE)
002E             28   TIMER2_RATE         EQU 1000      ; 1000Hz, for a timer tick of 1ms
002E             29   TIMER2_RELOAD       EQU ((65536-(CLK/TIMER2_RATE)))
002E             30   
002E             31   LOCK_PARAMETERS     equ P0.4 ; button to lock parameter / start FSM
002E             32   NEXT_SCREEN         equ P2.6 ; next screen in parameter selection
002E             33   INC_DEC             equ P2.4 ; increment / decrement parameters
002E             34   SHIFT_BUTTON         equ P0.5 ; hold to decrement
002E             35   OVEN_PIN            equ P1.1 ; output pin connected to the SSR
002E             36   START_BUTTON        equ P1.2 ; start button from state 0 -> 1
002E             37   ABORT_BUTTON        equ P0.3 ; emergency exit from any state
002E             38   
002E             39   
002E             40   LCD_RS  equ P3.2
002E             41   ; LCD_RW equ Px.x ; Always grounded
002E             42   LCD_E   equ P3.3
002E             43   LCD_D4  equ P3.4
002E             44   LCD_D5  equ P3.5
002E             45   LCD_D6  equ P3.6
002E             46   LCD_D7  equ P3.7
002E             47   
002E             48   ; They are used for Bit-Bang SPI, in Mode(0,0)
002E             49   CE_ADC  EQU P2.0 ; Slave select / Enable
002E             50   MY_MOSI EQU P2.1 ; Master out / Slave in
002E             51   MY_MISO EQU P2.5 ; Master in / Slave out
002E             52   MY_SCLK EQU P2.7 ; Serial Clock
002E             53   
002E             54   ; The pins used for SPI (SPEAKER)
002E             55   SPEAKER_FLASH_CE  EQU  P1.6
002E             56   SPEAKER_MY_MOSI   EQU  P1.4
002E             57   SPEAKER_MY_MISO   EQU  P1.3
002E             58   SPEAKER_MY_SCLK   EQU  P1.5
002E             59   
002E             60   SPEAKER_DAC       EQU P2.3 
002E             61   ;RESERVED EMPTY PIN (P2.2)
002E             62   SPEAKER           EQU P1.0 ; Used with a MOSFET to turn off speaker when not in use
002E             63   
002E             64   ; Commands supported by the SPI flash memory according to the datasheet
002E             65   WRITE_ENABLE      EQU 0x06  ; Address:0 Dummy:0 Num:0
002E             66   WRITE_DISABLE     EQU 0x04  ; Address:0 Dummy:0 Num:0
002E             67   READ_STATUS       EQU 0x05  ; Address:0 Dummy:0 Num:1 to infinite
002E             68   READ_BYTES        EQU 0x03  ; Address:3 Dummy:0 Num:1 to infinite
002E             69   READ_SILICON_ID   EQU 0xab  ; Address:0 Dummy:3 Num:1 to infinite
002E             70   FAST_READ         EQU 0x0b  ; Address:3 Dummy:1 Num:1 to infinite
002E             71   WRITE_STATUS      EQU 0x01  ; Address:0 Dummy:0 Num:1
002E             72   WRITE_BYTES       EQU 0x02  ; Address:3 Dummy:0 Num:1 to 256
002E             73   ERASE_ALL         EQU 0xc7  ; Address:0 Dummy:0 Num:0
002E             74   ERASE_BLOCK       EQU 0xd8  ; Address:3 Dummy:0 Num:0
002E             75   READ_DEVICE_ID    EQU 0x9f  ; Address:0 Dummy:2 Num:1 to infinite
002E             76   
002E             77   ;-------------------------------------------;
002E             78   ;               Libraries                   ;
002E             79   ;-------------------------------------------;
                546   $LIST
                 82   $LIST
034A             84   
034A             85   ;-------------------------------------------;
034A             86   ;               Variables                   ;
034A             87   ;-------------------------------------------;
034A             88   ; In the 8051 we can define direct access variables starting at location 0x30 up to location 0x7F
0030             89   DSEG at 0x30
0030             90   x:                  ds 4
0034             91   y:                  ds 4
0038             92   soak_temp:           ds 1 
0039             93   soak_time:               ds 1
003A             94   refl_temp:               ds 1
003B             95   refl_time:               ds 1
003C             96   cool_temp:          ds 1
003D             97   temp_result:        ds 4
0041             98   temp_pass_result:        ds 4
0045             99   state:              ds 1
0046            100   bcd:                ds 5
004B            101   channel_0_voltage:  ds 4
004F            102   
004F            103   w:                  ds 3 ; 24-bit play counter.  Decremented in Timer 1 ISR.
0052            104   
0052            105   Count1ms:           ds 2 ; Used to determine when 1/10 of a second has passed
0054            106   tenth_seconds:      ds 1 ; Store tenth_seconds 
0055            107   seconds:            ds 1 ; Stores seconds
0056            108   sound_seconds:      ds 1 ; sounds seconds
0057            109   PowerPercent:       ds 1 ; Power% for Oven, 1 = 10%, 2 = 20% ... 10 = 100%. Using PWM
0058            110   
0000            111   BSEG
0000            112   mf:                 dbit 1
0001            113   tenth_seconds_flag: dbit 1 ; Set to one in the ISR every time 100 ms had passed
0002            114   seconds_flag:       dbit 1 
0003            115   
0003            116   
0003            117   fivesecondsflag:    dbit 1
0004            118   state_1_sound_flag: dbit 1
0005            119   state_2_sound_flag: dbit 1
0006            120   state_3_sound_flag: dbit 1
0007            121   state_4_sound_flag: dbit 1
0008            122   state_5_sound_flag: dbit 1
0009            123   
034A            124   CSEG ; start of code segment
034A            125   ;-------------------------------------------;
034A            126   ;          Timer 1 Initialization           ;
034A            127   ;-------------------------------------------;
034A            128   Timer1_Init:
034A            129   ; Configure SPI pins and turn off speaker
034A 53D6CE     130            anl P1M0, #0b_1100_1110
034D 43D731     131            orl P1M1, #0b_0011_0001
0350 D293       132            setb SPEAKER_MY_MISO  ; Configured as input
0352 D296       133            setb SPEAKER_FLASH_CE ; CS=1 for SPI flash memory
0354 C295       134            clr SPEAKER_MY_SCLK   ; Rest state of SCLK=0
0356 C290       135            clr SPEAKER   ; Turn off speaker.
0358            136            
0358            137            ; Configure timer 1
0358 53890F     138            anl     TMOD, #0x0F ; Clear the bits of timer 1 in TMOD
035B 438910     139            orl     TMOD, #0x10 ; Set timer 1 in 16-bit timer mode.  Don't change the bits of timer 0
035E 758DFC     140            mov TH1, #high(TIMER1_RELOAD)
0361 758B15     141            mov TL1, #low(TIMER1_RELOAD)
0364            142            ; Set autoreload value
0364 75F5FC     143            mov RH1, #high(TIMER1_RELOAD)
0367 75F315     144            mov RL1, #low(TIMER1_RELOAD)
036A            145   
036A            146            ; Enable the timer and interrupts
036A D2AB       147       setb ET1  ; Enable timer 1 interrupt
036C            148            ; setb TR1 ; Timer 1 is only enabled to play stored sound
036C            149   
036C            150            ; Configure the DAC.  The DAC output we are using is P2.3, but P2.2 is also reserved.
036C 75A5A0     151            mov DADI, #0b_1010_0000 ; ACON=1
036F 75A43A     152            mov DADC, #0b_0011_1010 ; Enabled, DAC mode, Left adjusted, CLK/4
0372 75AD80     153            mov DADH, #0x80 ; Middle of scale
0375 75AC00     154            mov DADL, #0
0378 43A440     155            orl DADC, #0b_0100_0000 ; Start DAC by GO/BSY=1
037B            156   check_DAC_init:
037B E5A4       157            mov a, DADC
037D 20E6FB     158            jb acc.6, check_DAC_init ; Wait for DAC to finish
0380            159            
0380 D2AF       160            setb EA ; Enable interrupts
0382            161   
0382            162            ; Not necesary if using internal DAC.
0382            163            ; If using an R-2R DAC connected to P0, configure the pins of P0
0382            164            ; (An external R-2R produces much better quality sound)
0382            165            ;mov P0M0, #0b_0000_0000
0382            166            ;mov P0M1, #0b_1111_1111
0382            167            
0382 22         168            ret
0383            169   
0383            170   ;-------------------------------------;
0383            171   ; ISR for Timer 1.  Used to playback  ;
0383            172   ; the WAV file stored in the SPI      ;
0383            173   ; flash memory.                       ;
0383            174   ;-------------------------------------;
0383            175   Timer1_ISR:
0383            176            ; The registers used in the ISR must be saved in the stack
0383 C0E0       177            push acc
0385 C0D0       178            push psw
0387            179            
0387            180            ; Check if the play counter is zero.  If so, stop playing sound.
0387 E54F       181            mov a, w+0
0389 4550       182            orl a, w+1
038B 4551       183            orl a, w+2
038D 601C       184            jz stop_playing
038F            185            
038F            186            ; Decrement play counter 'w'.  In this implementation 'w' is a 24-bit counter.
038F 74FF       187            mov a, #0xff
0391 154F       188            dec w+0
0393 B54F07     189            cjne a, w+0, keep_playing
0396 1550       190            dec w+1
0398 B55002     191            cjne a, w+1, keep_playing
039B 1551       192            dec w+2
039D            193            
039D            194   keep_playing:
039D D290       195            setb SPEAKER
039F 120440     196            lcall Send_SPI ; Read the next byte from the SPI Flash...
03A2            197            ;mov P0, a ; WARNING: Remove this if not using an external DAC to use the pins of P0 as GPIO
03A2 2480       198            add a, #0x80
03A4 F5AD       199            mov DADH, a ; Output to DAC. DAC output is pin P2.3
03A6 43A440     200            orl DADC, #0b_0100_0000 ; Start DAC by setting GO/BSY=1
03A9 800C       201            sjmp Timer1_ISR_Done
03AB            202   
03AB            203   stop_playing:
03AB C28E       204            clr TR1 ; Stop timer 1
03AD D296       205            setb SPEAKER_FLASH_CE  ; Disable SPI Flash
03AF C290       206            clr SPEAKER ; Turn off speaker.  Removes hissing noise when not playing sound.
03B1 75AD80     207            mov DADH, #0x80 ; middle of range
03B4 43A440     208            orl DADC, #0b_0100_0000 ; Start DAC by setting GO/BSY=1
03B7            209   
03B7            210   Timer1_ISR_Done:         
03B7 D0D0       211            pop psw
03B9 D0E0       212            pop acc
03BB 32         213            reti
03BC            214   
03BC            215   ;-------------------------------------------;
03BC            216   ;       Macro to play BCD as sounds         ;
03BC            217   ;         (wooooowoooo make noise)          ;
03BC            218   ;-------------------------------------------;
                219   Play_Sound MAC 
                220   	lcall ?Play_Sound
                221   ENDMAC
03BC            222   
03BC            223   ?Play_Sound:
03BC 120163     224            lcall bcd2hex
03BF            225       ;Multiply by 22050 / 5 bytes
03BF 753405     226            mov y+0, #low (5 % 0x10000) 
03C2 753500     226            mov y+1, #high(5 % 0x10000) 
03C5 753600     226            mov y+2, #low (5 / 0x10000) 
03C8 753700     226            mov y+3, #high(5 / 0x10000) 
03CB 1202E1     227       lcall div32 
03CE 753422     228            mov y+0, #low (22050 % 0x10000) 
03D1 753556     228            mov y+1, #high(22050 % 0x10000) 
03D4 753600     228            mov y+2, #low (22050 / 0x10000) 
03D7 753700     228            mov y+3, #high(22050 / 0x10000) 
03DA 120254     229       lcall mul32
03DD            230       
03DD C28E       231       clr TR1 ; Stop Timer 1 ISR from playing previous request
03DF D296       232            setb SPEAKER_FLASH_CE
03E1 C290       233            clr SPEAKER ; Turn off speaker.
03E3            234            
03E3 C296       235            clr SPEAKER_FLASH_CE ; Enable SPI Flash
03E5 7403       236            mov a, #READ_BYTES
03E7 120440     237            lcall Send_SPI
03EA            238            ; Set the initial position in memory where to start playing
03EA E532       239            mov a, x+2
03EC 120440     240            lcall Send_SPI
03EF E531       241            mov a, x+1
03F1 120440     242            lcall Send_SPI
03F4 E530       243            mov a, x+0
03F6 120440     244            lcall Send_SPI
03F9            245            
03F9            246            ;Plays a second, the length of time to say 1 digit
03F9 755100     247            mov w+2, #0x00
03FC 755056     248            mov w+1, #0x56
03FF 754F20     249            mov w+0, #0x20
0402            250            
0402 D290       251            setb SPEAKER ; Turn on speaker.
0404 D28E       252            setb TR1 ; Start playback by enabling Timer 1
0406 22         253   ret
0407            254   
0407            255   ;-------------------------------------------;
0407            256   ;   Macro to play BCD transition sounds     ;
0407            257   ;         (wooooowoooo make noise)          ;
0407            258   ;-------------------------------------------;
                259   State_Sound MAC 
                260   	lcall ?State_Sound
                261   ENDMAC
0407            262   
0407            263   ?State_Sound:
0407 75343A     264            mov y+0, #low (4410 % 0x10000) 
040A 753511     264            mov y+1, #high(4410 % 0x10000) 
040D 753600     264            mov y+2, #low (4410 / 0x10000) 
0410 753700     264            mov y+3, #high(4410 / 0x10000) 
0413 120254     265       lcall mul32
0416            266       
0416 C28E       267       clr TR1 ; Stop Timer 1 ISR from playing previous request
0418 D296       268            setb SPEAKER_FLASH_CE
041A C290       269            clr SPEAKER ; Turn off speaker.
041C            270            
041C C296       271            clr SPEAKER_FLASH_CE ; Enable SPI Flash
041E 7403       272            mov a, #READ_BYTES
0420 120440     273            lcall Send_SPI
0423            274            ; Set the initial position in memory where to start playing
0423 E532       275            mov a, x+2
0425 120440     276            lcall Send_SPI
0428 E531       277            mov a, x+1
042A 120440     278            lcall Send_SPI
042D E530       279            mov a, x+0
042F 120440     280            lcall Send_SPI
0432            281            
0432            282            ;Plays a second, the length of time to say 1 digit
0432 755100     283            mov w+2, #0x00
0435 755056     284            mov w+1, #0x56
0438 754F20     285            mov w+0, #0x20
043B            286            
043B D290       287            setb SPEAKER ; Turn on speaker.
043D D28E       288            setb TR1 ; Start playback by enabling Timer 1
043F 22         289   ret
0440            290   
0440            291   ;---------------------------------;
0440            292   ; Sends AND receives a byte via   ;
0440            293   ; SPI.                            ;
0440            294   ;---------------------------------;
0440            295   Send_SPI:
                296   	SPIBIT MAC
                297   	    ; Send/Receive bit %0
                298   		rlc a
                299   		mov SPEAKER_MY_MOSI, c
                300   		setb SPEAKER_MY_SCLK
                301   		mov c, SPEAKER_MY_MISO
                302   		clr SPEAKER_MY_SCLK
                303   		mov acc.0, c
                304   	ENDMAC
0440            305            
0440            306                ; Send/Receive bit 7
0440 33         306                    rlc a
0441 9294       306                    mov SPEAKER_MY_MOSI, c
0443 D295       306                    setb SPEAKER_MY_SCLK
0445 A293       306                    mov c, SPEAKER_MY_MISO
0447 C295       306                    clr SPEAKER_MY_SCLK
0449 92E0       306                    mov acc.0, c
044B            307                ; Send/Receive bit 6
044B 33         307                    rlc a
044C 9294       307                    mov SPEAKER_MY_MOSI, c
044E D295       307                    setb SPEAKER_MY_SCLK
0450 A293       307                    mov c, SPEAKER_MY_MISO
0452 C295       307                    clr SPEAKER_MY_SCLK
0454 92E0       307                    mov acc.0, c
0456            308                ; Send/Receive bit 5
0456 33         308                    rlc a
0457 9294       308                    mov SPEAKER_MY_MOSI, c
0459 D295       308                    setb SPEAKER_MY_SCLK
045B A293       308                    mov c, SPEAKER_MY_MISO
045D C295       308                    clr SPEAKER_MY_SCLK
045F 92E0       308                    mov acc.0, c
0461            309                ; Send/Receive bit 4
0461 33         309                    rlc a
0462 9294       309                    mov SPEAKER_MY_MOSI, c
0464 D295       309                    setb SPEAKER_MY_SCLK
0466 A293       309                    mov c, SPEAKER_MY_MISO
0468 C295       309                    clr SPEAKER_MY_SCLK
046A 92E0       309                    mov acc.0, c
046C            310                ; Send/Receive bit 3
046C 33         310                    rlc a
046D 9294       310                    mov SPEAKER_MY_MOSI, c
046F D295       310                    setb SPEAKER_MY_SCLK
0471 A293       310                    mov c, SPEAKER_MY_MISO
0473 C295       310                    clr SPEAKER_MY_SCLK
0475 92E0       310                    mov acc.0, c
0477            311                ; Send/Receive bit 2
0477 33         311                    rlc a
0478 9294       311                    mov SPEAKER_MY_MOSI, c
047A D295       311                    setb SPEAKER_MY_SCLK
047C A293       311                    mov c, SPEAKER_MY_MISO
047E C295       311                    clr SPEAKER_MY_SCLK
0480 92E0       311                    mov acc.0, c
0482            312                ; Send/Receive bit 1
0482 33         312                    rlc a
0483 9294       312                    mov SPEAKER_MY_MOSI, c
0485 D295       312                    setb SPEAKER_MY_SCLK
0487 A293       312                    mov c, SPEAKER_MY_MISO
0489 C295       312                    clr SPEAKER_MY_SCLK
048B 92E0       312                    mov acc.0, c
048D            313                ; Send/Receive bit 0
048D 33         313                    rlc a
048E 9294       313                    mov SPEAKER_MY_MOSI, c
0490 D295       313                    setb SPEAKER_MY_SCLK
0492 A293       313                    mov c, SPEAKER_MY_MISO
0494 C295       313                    clr SPEAKER_MY_SCLK
0496 92E0       313                    mov acc.0, c
0498            314   
0498 22         315            ret
0499            316   
0499            317   ;-------------------------------------------;
0499            318   ;          Timer 2 Initialization           ;
0499            319   ;-------------------------------------------;
0499            320   Timer2_Init:
0499 75C800     321            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
049C 75CDA9     322            mov TH2, #high(TIMER2_RELOAD)
049F 75CC9A     323            mov TL2, #low(TIMER2_RELOAD)
04A2            324            ; Set the reload value
04A2 75CBA9     325            mov RCAP2H, #high(TIMER2_RELOAD)
04A5 75CA9A     326            mov RCAP2L, #low(TIMER2_RELOAD)
04A8            327            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
04A8 E4         328            clr a
04A9 F552       329            mov Count1ms+0, a
04AB F553       330            mov Count1ms+1, a
04AD            331            ; Enable the timer and interrupts
04AD D2AD       332       setb ET2  ; Enable timer 2 interrupt
04AF D2CA       333       setb TR2  ; Enable timer 2
04B1 22         334            ret
04B2            335   
04B2            336   ;---------------------------------;
04B2            337   ;       ISR for timer 2           ;
04B2            338   ;---------------------------------;
04B2            339   Timer2_ISR:
04B2 C2CF       340            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
04B4 B290       341            cpl P1.0 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
04B6            342            
04B6            343            ; The two registers used in the ISR must be saved in the stack
04B6 C0E0       344            push acc
04B8 C0D0       345            push psw
04BA            346            
04BA            347            ; Increment the 16-bit one mili second counter
04BA 0552       348            inc Count1ms+0    ; Increment the low 8-bits first
04BC E552       349            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
04BE 7002       350            jnz Inc_Done
04C0 0553       351            inc Count1ms+1
04C2            352   
04C2            353   Inc_Done:
04C2            354            ; Check if half second has passed
04C2 E552       355            mov a, Count1ms+0
04C4 B46466     356            cjne a, #low(100), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
04C7 E553       357            mov a, Count1ms+1
04C9 B40061     358            cjne a, #high(100), Timer2_ISR_done
04CC            359   
04CC            360            ; 100 milliseconds have passed.  Set a flag so the main program knows
04CC D201       361            setb tenth_seconds_flag ; Let the main program know 100 milliseconds have passed
04CE            362   
04CE E4         363            clr a
04CF F552       364            mov Count1ms+0, a
04D1 F553       365            mov Count1ms+1, a
04D3            366   
04D3            367            ;1/10 Seconds Increment
04D3 E554       368            mov a, tenth_seconds
04D5 B40914     369            cjne a, #0x09, IncTenthSeconds
04D8 7400       370       mov a, #0 
04DA D4         371       da a
04DB F554       372       mov tenth_seconds, a
04DD            373   
04DD            374            ;Seconds Increment
04DD D202       375       setb seconds_flag
04DF E555       376            mov     a, Seconds
04E1 B49915     377       cjne         a, #0x99, IncSeconds ; if Seconds != 59, then seconds++
04E4 7400       378       mov          a, #0
04E6 D4         379       da           a
04E7 F555       380       mov          seconds, a
04E9 0204C2     381       ljmp Inc_Done
04EC            382   
04EC            383            ;jnb UPDOWN, Timer2_ISR_decrement ;;; TEST REMOVING THIS ;;;;
04EC            384            ;add a, #0x01 ; test this
04EC            385            ;sjmp Timer2_ISR_da
04EC            386            
04EC            387   IncTenthSeconds:
04EC 2401       388            add a, #0x01
04EE D4         389            da a
04EF F554       390            mov tenth_seconds, a
04F1 B557CE     391            cjne a, PowerPercent, Inc_Done ;test jumping back into forever loop
04F4 D291       392            setb OVEN_PIN
04F6 0204C2     393            ljmp Inc_Done
04F9            394   
04F9            395   IncSeconds:
04F9 2401       396            add a, #0x01
04FB D4         397            da a
04FC F555       398            mov seconds, a
04FE E557       399            mov a, PowerPercent
0500            400       
0500 D291       401       setb OVEN_PIN
0502 B40017     402            cjne a, #0x00, OvenOn
0505            403   
0505 E556       404       mov a, sound_seconds
0507 B4040A     405       cjne a, #0x04, IncSoundSeconds
050A 7400       406       mov a, #0
050C D4         407       da a
050D F556       408       mov sound_seconds, a
050F D203       409       setb fivesecondsflag
0511 0204C2     410            ljmp Inc_Done
0514            411   
0514            412   IncSoundSeconds:
0514 2401       413       add a, #0x01
0516 D4         414       da a
0517 F556       415       mov sound_seconds, a
0519 0204C2     416       ljmp Inc_Done
051C            417   
051C            418   OvenOn:
051C C291       419            clr OVEN_PIN
051E            420   
051E E556       421       mov a, sound_seconds
0520 B404F1     422       cjne a, #0x04, IncSoundSeconds
0523 7400       423       mov a, #0
0525 D4         424       da a
0526 F556       425       mov sound_seconds, a
0528 D203       426       setb fivesecondsflag
052A            427   
052A 0204C2     428            ljmp Inc_Done
052D            429   
052D            430   Timer2_ISR_done:
052D D0D0       431            pop psw
052F D0E0       432            pop acc
0531 32         433            reti
0532            434   
0532            435   Timer2_ISR_decrement:
0532 2499       436            add a, #0x99 ; Adding the 10-complement of -1 is like subtracting 1.
0534            437   
0534            438   Timer2_ISR_da:
0534 D4         439            da a
0535 F554       440            mov tenth_seconds, a
0537            441   
0537            442   ;-------------------------------------------;
0537            443   ; Serial Peripheral Interface communication ; 
0537            444   ;     using Bit-Bang SPI in Mode (0,0)      ;
0537            445   ;-------------------------------------------;
0537            446   INIT_SPI:
0537 D2A5       447       setb MY_MISO   ; Make MISO an input pin
0539 C2A7       448       clr MY_SCLK    ; For mode (0,0) SCLK is zero
053B 22         449       ret
053C            450   
053C            451   DO_SPI_G:
053C C0E0       452       push acc
053E 7900       453       mov R1, #0     ; Received byte stored in R1
0540 7A08       454       mov R2, #8     ; Loop counter (8-bits)
0542            455   
0542            456   DO_SPI_G_LOOP:
0542 E8         457       mov a, R0      ; Byte to write is in R0
0543 33         458       rlc a          ; Carry flag has bit to write
0544 F8         459       mov R0, a
0545 92A1       460       mov MY_MOSI, c
0547 D2A7       461       setb MY_SCLK   ; Transmit
0549 A2A5       462       mov c, MY_MISO ; Read received bit
054B E9         463       mov a, R1      ; Save received bit in R1
054C 33         464       rlc a
054D F9         465       mov R1, a
054E C2A7       466       clr MY_SCLK
0550 DAF0       467       djnz R2, DO_SPI_G_LOOP
0552 D0E0       468       pop acc
0554 22         469       ret
0555            470   
0555            471   ;-------------------------------------------;
0555            472   ;       Serial Port Transmission and        ;
0555            473   ;         Baud Rate Configurations          ;
0555            474   ;-------------------------------------------;
0555            475   ; Configure the serial port and baud rate
0555            476   InitSerialPort:
0555            477       ; Since the reset button bounces, we need to wait a bit before
0555            478       ; sending messages, otherwise we risk displaying gibberish!
0555 79DE       479       mov R1, #222
0557 78A6       480       mov R0, #166
0559 D8FE       481       djnz R0, $   ; 3 cycles->3*45.21123ns*166=22.51519us
055B D9FA       482       djnz R1, $-4 ; 22.51519us*222=4.998ms
055D            483       ; Now we can proceed with the configuration
055D 438780     484            orl     PCON,#0x80
0560 759852     485            mov     SCON,#0x52
0563 759B00     486            mov     BDRCON,#0x00
0566 759AF4     487            mov     BRL,#BRG_VAL
0569 759B1E     488            mov     BDRCON,#0x1E ; BDRCON=BRR|TBCK|RBCK|SPD;
056C 22         489       ret
056D            490   
056D            491   ; Send a character using the serial port
056D            492   putchar:
056D 3099FD     493       jnb TI, putchar
0570 C299       494       clr TI
0572 F599       495       mov SBUF, a
0574 22         496       ret
0575            497   
0575            498   ; Send a constant-zero-terminated string using the serial port
0575            499   SendString:
0575 E4         500       clr A
0576 93         501       movc A, @A+DPTR
0577 6006       502       jz SendStringDone
0579 12056D     503       lcall putchar
057C A3         504       inc DPTR
057D 80F6       505       sjmp SendString
057F            506   
057F            507   SendStringDone:
057F 22         508       ret
0580            509   
0580            510   ;-------------------------------------------;
0580            511   ;            Send To Serial Port            ;
0580            512   ;-------------------------------------------;
0580            513   ; Send eight bit number via serial port, passed in ’a’.
0580            514   SendToSerialPort:
0580 75F064     515       mov b, #100
0583 84         516       div ab
0584 4430       517       orl a, #0x30    ; Convert hundreds to ASCII
0586 12056D     518       lcall putchar   ; Send to PuTTY/Python/Matlab
0589 E5F0       519       mov a, b        ; Remainder is in register b
058B 75F00A     520       mov b, #10
058E 84         521       div ab
058F 4430       522       orl a, #0x30    ; Convert tens to ASCII
0591 12056D     523       lcall putchar   ; Send to PuTTY/Python/Matlab
0594 E5F0       524       mov a, b
0596 4430       525       orl a, #0x30    ; Convert units to ASCII
0598 12056D     526       lcall putchar   ; Send to PuTTY/Python/Matlab
059B 22         527   ret
059C            528   
059C            529   ;-------------------------------------------;
059C            530   ;        Macro to read ADC channel          ;
059C            531   ;       ( ex: Read_ADC_Channel(0) )         ;
059C            532   ;-------------------------------------------;
                533   Read_ADC_Channel MAC
                534       mov b, #%0
                535       lcall _Read_ADC_Channel
                536   ENDMAC
059C            537   
059C            538   _Read_ADC_Channel:
059C C2A0       539       clr CE_ADC
059E 7801       540       mov R0, #00000001B  ; Start bit:1
05A0 12053C     541       lcall DO_SPI_G
05A3 E5F0       542       mov a, b
05A5 C4         543       swap a
05A6 54F0       544       anl a, #0F0H
05A8 D2E7       545       setb acc.7          ; Single mode (bit 7).
05AA F8         546       mov R0, a
05AB 12053C     547       lcall DO_SPI_G
05AE E9         548       mov a, R1           ; R1 contains bits 8 and 9
05AF 5403       549       anl a, #00000011B   ; We need only the two least significant bits
05B1 FF         550       mov R7, a           ; Save result high.
05B2 7855       551       mov R0, #55H        ; It doesn't matter what we transmit...
05B4 12053C     552       lcall DO_SPI_G
05B7 E9         553       mov a, R1           ; R1 contains bits 0 to 7. Save result low.
05B8 FE         554       mov R6, a
05B9 D2A0       555       setb CE_ADC
05BB 22         556       ret
05BC            557   
05BC            558   ;-------------------------------------------;
05BC            559   ;   Send a BCD number to PuTTY in ASCIII    ;
05BC            560   ;-------------------------------------------;
                561   Send_BCD mac
                562   	push ar0
                563   	mov r0, %0
                564   	lcall ?Send_BCD
                565   	pop ar0
                566   endmac
05BC            567   
05BC            568   ?Send_BCD:
05BC C0E0       569            push acc
05BE            570            ; Write most significant digit
05BE E8         571            mov a, r0
05BF C4         572            swap a
05C0 540F       573            anl a, #0fh
05C2 4430       574            orl a, #30h
05C4 12056D     575            lcall putchar
05C7            576            ; write least significant digit
05C7 E8         577            mov a, r0
05C8 540F       578            anl a, #0fh
05CA 4430       579            orl a, #30h
05CC 12056D     580            lcall putchar
05CF D0E0       581            pop acc
05D1 22         582       ret
05D2            583   
05D2            584   ;-------------------------------------------;
05D2            585   ;            Send To LCD Screen             ;
05D2            586   ;-------------------------------------------;
05D2            587   ; Eight bit number to display passed in ’a’.
05D2            588   ; Sends result to LCD
05D2            589   SendToLCD:
05D2 75F064     590       mov b, #100
05D5 84         591       div ab
05D6 4430       592       orl a, #0x30        ; Convert hundreds to ASCII
05D8 12007E     593       lcall ?WriteData    ; Send to LCD
05DB E5F0       594       mov a, b            ; Remainder is in register b
05DD 75F00A     595       mov b, #10
05E0 84         596       div ab
05E1 4430       597       orl a, #0x30        ; Convert tens to ASCII
05E3 12007E     598       lcall ?WriteData    ; Send to LCD
05E6 E5F0       599       mov a, b
05E8 4430       600       orl a, #0x30        ; Convert units to ASCII
05EA 12007E     601       lcall ?WriteData    ; Send to LCD
05ED 22         602   ret
05EE            603   
05EE            604   ;-------------------------------------------;
05EE            605   ;        Save / Load Configurations         ;
05EE            606   ;-------------------------------------------;
                607   loadbyte mac
                608       mov a, %0
                609       movx @dptr, a
                610       inc dptr
                611   endmac
05EE            612   
05EE            613   Save_Configuration:
05EE 75D108     614       mov FCON, #0x08         ; Page Buffer Mapping Enabled (FPS = 1)
05F1 907F80     615       mov dptr, #0x7f80       ; Last page of flash memory
05F4            616       ; Save variables
05F4 E538       617       mov a, soak_temp
05F6 F0         617       movx @dptr, a
05F7 A3         617       inc dptr ; @0x7f80
05F8 E539       618       mov a, soak_time
05FA F0         618       movx @dptr, a
05FB A3         618       inc dptr ; @0x7f81
05FC E53A       619       mov a, refl_temp
05FE F0         619       movx @dptr, a
05FF A3         619       inc dptr ; @0x7f82
0600 E53B       620       mov a, refl_time
0602 F0         620       movx @dptr, a
0603 A3         620       inc dptr ; @0x7f83
0604 7455       621       mov a, #0x55
0606 F0         621       movx @dptr, a
0607 A3         621       inc dptr             ; First key value @0x7f84
0608 74AA       622       mov a, #0xAA
060A F0         622       movx @dptr, a
060B A3         622       inc dptr             ; Second key value @0x7f85
060C 75D100     623       mov FCON, #0x00             ; Page Buffer Mapping Disabled (FPS = 0)
060F 43D240     624       orl EECON, #0b01000000      ; Enable auto-erase on next write sequence
0612 75D150     625       mov FCON, #0x50             ; Write trigger first byte
0615 75D1A0     626       mov FCON, #0xA0             ; Write trigger second byte
0618            627       ; CPU idles until writing of flash completes.
0618 75D100     628       mov FCON, #0x00             ; Page Buffer Mapping Disabled (FPS = 0)
061B 53D2BF     629       anl EECON, #0b10111111      ; Disable auto-erase
061E 22         630   ret    
061F            631   
061F            632   Load_Defaults:
061F 753864     633       mov soak_temp, #0x64 ;100 HEX
0622 75390A     634       mov soak_time, #0x0A ;10 HEX
0625 753AC8     635       mov refl_temp, #0xC8 ;200 HEX
0628 753B0A     636       mov refl_time, #0x0A ;10 HEX
062B 22         637   ret
062C            638   
                639   getbyte mac
                640       clr a
                641       movc a, @a+dptr
                642       mov %0, a
                643       inc dptr
                644   Endmac
062C            645   
062C            646   Load_Configuration:
062C 907F84     647       mov dptr, #0x7f84               ; First key value location.
062F E4         648       clr a
0630 93         648       movc a, @a+dptr
0631 F8         648       mov R0, a
0632 A3         648       inc dptr
0633            648                        ; 0x7f84 should contain 0x55
0633 B855E9     649       cjne R0, #0x55, Load_Defaults
0636 E4         650       clr a
0637 93         650       movc a, @a+dptr
0638 F8         650       mov R0, a
0639 A3         650       inc dptr                     ; 0x7f85 should contain 0xAA
063A B8AAE2     651       cjne R0, #0xAA, Load_Defaults
063D            652       ; Keys are good. Get stored values.
063D 907F80     653       mov dptr, #0x7f80
0640 E4         654       clr a
0641 93         654       movc a, @a+dptr
0642 F538       654       mov soak_temp, a
0644 A3         654       inc dptr ; 0x7f80
0645 E4         655       clr a
0646 93         655       movc a, @a+dptr
0647 F539       655       mov soak_time, a
0649 A3         655       inc dptr ; 0x7f81
064A E4         656       clr a
064B 93         656       movc a, @a+dptr
064C F53A       656       mov refl_temp, a
064E A3         656       inc dptr ; 0x7f82
064F E4         657       clr a
0650 93         657       movc a, @a+dptr
0651 F53B       657       mov refl_time, a
0653 A3         657       inc dptr ; 0x7f83
0654 22         658   ret    
0655            659   
0655            660   ;-------------------------------------------;
0655            661   ;                  Delay                    ;
0655            662   ;-------------------------------------------;
0655            663   delay:
0655 7B0A       664        mov R3, #10
0657 7A64       665   L13: mov R2, #100
0659 792D       666   L12: mov R1, #45
065B 78A6       667   L11: mov R0, #166
065D D8FE       668   L10: djnz R0, L10     ; 3 cycles->3*45.21123ns*166=22.51519us
065F D9FA       669        djnz R1, L11     ; 22.51519us*45=1.013ms
0661 DAF6       670        djnz R2, L12     ; number of millisecons to wait passed in R2
0663 DBF2       671        djnz R3, L13
0665 22         672        ret
0666            673   
0666            674   ;-------------------------------------------;
0666            675   ;        Temperature Calculations           ;
0666            676   ;-------------------------------------------;
0666            677   Wait10us:
0666 784A       678            mov R0, #74
0668 D8FE       679            djnz R0, $
066A 22         680            ret
066B            681   Average_CH0:
066B 753000     682            mov x+0, #low (0 % 0x10000) 
066E 753100     682            mov x+1, #high(0 % 0x10000) 
0671 753200     682            mov x+2, #low (0 / 0x10000) 
0674 753300     682            mov x+3, #high(0 / 0x10000) 
0677 7D64       683            mov R5, #100
0679            684   Sum_loop0:
0679 75F000     685       mov b, #0
067C 12059C     685       lcall _Read_ADC_Channel
067F 753700     686            mov y+3, #0
0682 753600     687            mov y+2, #0
0685 8F35       688            mov y+1, R7
0687 8E34       689            mov y+0, R6
0689 12019F     690            lcall add32
068C 120666     691            lcall Wait10us
068F DDE8       692            djnz R5, Sum_loop0
0691 753464     693            mov y+0, #low (100 % 0x10000) 
0694 753500     693            mov y+1, #high(100 % 0x10000) 
0697 753600     693            mov y+2, #low (100 / 0x10000) 
069A 753700     693            mov y+3, #high(100 / 0x10000) 
069D 1202E1     694            lcall div32
06A0 22         695            ret
06A1            696            
06A1            697   Do_Something_With_Result:
06A1 854B30     698       mov x+0,channel_0_voltage+0
06A4 854C31     699       mov x+1,channel_0_voltage+1
06A7 753200     700       mov x+2,#0
06AA 753300     701       mov x+3,#0
06AD            702            
06AD 753400     703            mov y+0, #low (4096 % 0x10000) 
06B0 753510     703            mov y+1, #high(4096 % 0x10000) 
06B3 753600     703            mov y+2, #low (4096 / 0x10000) 
06B6 753700     703            mov y+3, #high(4096 / 0x10000) 
06B9 120254     704            lcall mul32
06BC            705   
06BC 7534F3     706            mov y+0, #low (13299 % 0x10000) 
06BF 753533     706            mov y+1, #high(13299 % 0x10000) 
06C2 753600     706            mov y+2, #low (13299 / 0x10000) 
06C5 753700     706            mov y+3, #high(13299 / 0x10000) 
06C8 1202E1     707            lcall div32
06CB            708       
06CB 753416     709            mov y+0, #low (22 % 0x10000) 
06CE 753500     709            mov y+1, #high(22 % 0x10000) 
06D1 753600     709            mov y+2, #low (22 / 0x10000) 
06D4 753700     709            mov y+3, #high(22 / 0x10000) 
06D7 12019F     710            lcall add32
06DA            711      
06DA            712   
06DA 853046     713       mov bcd,x ; move result into x
06DD E530       714       mov a, x
06DF            715       ;da a
06DF F53D       716       mov temp_result, a
06E1            717   
06E1            718       
06E1            719   
06E1 1200DA     720       lcall hex2bcd ;convert x to BCD
06E4            721   
06E4 854641     722       mov temp_pass_result + 0, BCD + 0
06E7 854742     723       mov temp_pass_result + 1, BCD + 1
06EA 854843     724       mov temp_pass_result + 2, BCD + 2
06ED 854944     725       mov temp_pass_result + 3, BCD + 3
06F0            726   
06F0 E545       727       mov a, state
06F2 B40602     728       cjne a, #6, display2
06F5 8003       729       sjmp nodisplay2
06F7            730       display2:
06F7 120717     731       lcall Display_10_digit_BCD
06FA            732       nodisplay2:
06FA            733   
06FA            734            ;lcall Delay
06FA C000       735            push ar0
06FC A847       735            mov r0, bcd+1
06FE 1205BC     735            lcall ?Send_BCD
0701 D000       735            pop ar0
0703 C000       736            push ar0
0705 A846       736            mov r0, bcd+0
0707 1205BC     736            lcall ?Send_BCD
070A D000       736            pop ar0
070C 740D       737       mov a,#'\r'
070E 12056D     738       lcall putchar
0711 740A       739       mov a,#'\n'
0713 12056D     740       lcall putchar
0716 22         741       ret
0717            742       ;takes voltage and give temperature
0717            743   
0717            744   Display_10_digit_BCD:
0717 C0E0       745            push acc
0719 7406       745            mov a, #6
071B 14         745            dec a
071C 1200BD     745            lcall ?Set_Cursor_2 ; Select column and row
071F D0E0       745            pop acc
0721 C000       746            push ar0
0723 A847       746            mov r0, bcd+1
0725 1200C4     746            lcall ?Display_BCD
0728 D000       746            pop ar0
072A C000       747            push ar0
072C A846       747            mov r0, bcd+0
072E 1200C4     747            lcall ?Display_BCD
0731 D000       747            pop ar0
0733 22         748       ret
0734            749   
0734            750   ;-------------------------------------------;
0734            751   ;        Increment / Decrement Macro        ;
0734            752   ;-------------------------------------------;
                753   Change_8bit_Variable MAC
                754       jb %0, %2
                755       Wait_Milli_Seconds(#100) ; de-bounce
                756       jb %0, %2
                757       jnb %0, $
                758       jb SHIFT_BUTTON, skip%Mb
                759       dec %1
                760       sjmp skip%Ma
                761   skip%Mb:
                762       inc %1
                763       inc %1
                764       inc %1
                765       inc %1
                766       inc %1
                767   skip%Ma:
                768   ENDMAC
0734            769   
0734            770   ;-------------------------------------------;
0734            771   ;   Messages / strings to display on LCD    ;
0734            772   ;   and send to PuTTY via serial port       ;
0734            773   ;-------------------------------------------;
0734            774   Hello_World: 
0734 48656C6C   775       DB  'Hello, World!', '\r', '\n', 0
     6F2C2057
     6F726C64
     210D0A00
0744 53746172   776   Initial_Putty:      db  'Starting temperature measurements...', '\r', '\n', 0
     74696E67
     2074656D
     70657261
     74757265
     206D6561
     73757265
     6D656E74
     732E2E2E
     0D0A00
076B            777   
076B 5265666C   778   Start_msg_1:            db  'Reflow Oven', 0
     6F77204F
     76656E00
0777 436F6E74   779   Start_msg_2:            db  'Controller', 0
     726F6C6C
     657200
0782 20202020   780   Clear_msg:              db  '                ', 0
     20202020
     20202020
     20202020
     00
0793 53657420   781   Parameter_Setting_1:    db  'Set Reflow Curve', 0
     5265666C
     6F772043
     75727665
     00
07A4 50617261   782   Parameter_Setting_2:    db  'Parameters      ', 0
     6D657465
     72732020
     20202020
     00
07B5 2E202020   783   Loading_msg:            db  '.   ', 0
     00
07BA 53657420   784   Soak_temp_set_msg_1:    db  'Set Soak Temp   ', 0
     536F616B
     2054656D
     70202020
     00
07CB 20432020   785   Soak_temp_set_msg_2:    db  ' C              ', 0
     20202020
     20202020
     20202020
     00
07DC 53657420   786   Soak_time_set_msg_1:    db  'Set Soak Time   ', 0
     536F616B
     2054696D
     65202020
     00
07ED 20536563   787   Soak_time_set_msg_2:    db  ' Sec            ', 0
     20202020
     20202020
     20202020
     00
07FE 53657420   788   Refl_temp_set_msg_1:    db  'Set Reflow Temp ', 0
     5265666C
     6F772054
     656D7020
     00
080F 20432020   789   Refl_temp_set_msg_2:    db  ' C              ', 0
     20202020
     20202020
     20202020
     00
0820 53657420   790   Refl_time_set_msg_1:    db  'Set Reflow Time ', 0
     5265666C
     6F772054
     696D6520
     00
0831 20536563   791   Refl_time_set_msg_2:    db  ' Sec            ', 0
     20202020
     20202020
     20202020
     00
0842 46534D20   792   FSM_msg:                db  'FSM not complete', 0
     6E6F7420
     636F6D70
     6C657465
     00
0853 436F6E66   793   Confirmation_msg:       db  'Confirm Settings', 0
     69726D20
     53657474
     696E6773
     00
0864            794   
0864 54454D50   795   TEMPERATURE_MESSAGE:    db 'TEMP:    C ', 0
     3A202020
     20432000
0870 743A2020   796   TIME_MESSAGE:           db 't:  s', 0
     7300
0876 503A00     797   POWER_MESSAGE:          db 'P:',0
0879 533A00     798   STATE_MESSAGE:          db 'S:',0
087C 20202020   799   seconds_dont_matter:    db '     ', 0
     2000
0882            800   
0882 53303A20   801   msg_state_0:            db  'S0: WAITING     ', 0
     57414954
     494E4720
     20202020
     00
0893 53313A20   802   msg_state_1:            db  'S1: RAMP TO SOAK', 0
     52414D50
     20544F20
     534F414B
     00
08A4 53323A20   803   msg_state_2:            db  'S2: SOAK        ', 0
     534F414B
     20202020
     20202020
     00
08B5 53333A20   804   msg_state_3:            db  'S3: RAMP TO REFL', 0
     52414D50
     20544F20
     5245464C
     00
08C6 53343A20   805   msg_state_4:            db  'S4: REFL0W      ', 0
     5245464C
     30572020
     20202020
     00
08D7 53353A20   806   msg_state_5:            db  'S5: COOLDOWN    ', 0
     434F4F4C
     444F574E
     20202020
     00
08E8 2A2A2A2A   807   msg_abort_1:            db  '*****ABORTED****', 0
     2A41424F
     52544544
     2A2A2A2A
     00
08F9 43484543   808   msg_abort_2:            db  'CHECK THERMOCPL ', 0
     4B205448
     45524D4F
     43504C20
     00
090A            809   
090A            810   
090A            811   
090A            812   ;-------------------------------------------;
090A            813   ;              Main Program                 ;
090A            814   ;-------------------------------------------;
090A            815   
090A            816   ;-------------------------------------------;
090A            817   ;          Parameter Selection              ;
090A            818   ;-------------------------------------------;
090A            819   MainProgram1:
090A 75817F     820       mov SP, #7FH
090D            821       ; configure all pins in bidirecitonal mode
090D 75E600     822       mov P0M0, #0
0910 75E700     823       mov P0M1, #0
0913 75CE00     824       mov P2M0, #0
0916 75CF00     825       mov P2M1, #0
0919 75C600     826       mov P3M0, #0
091C 75C700     827       mov P3M1, #0
091F 75BE00     828       mov P4M0, #0
0922 75BF00     829       mov P4M1, #0
0925            830       
0925            831       ;lcall Timer2_Init
0925 120088     832       lcall LCD_4BIT
0928 12062C     833       lcall Load_Configuration
092B            834   
092B C0E0       835            push acc
092D 7403       835            mov a, #3
092F 14         835            dec a
0930 1200BF     835            lcall ?Set_Cursor_1 ; Select column and row
0933 D0E0       835            pop acc
0935 C083       836            push dph
0937 C082       836            push dpl
0939 C0E0       836            push acc
093B 90076B     836            mov dptr, #Start_msg_1
093E 1200B2     836            lcall ?Send_Constant_String
0941 D0E0       836            pop acc
0943 D082       836            pop dpl
0945 D083       836            pop dph
0947 C0E0       837            push acc
0949 7403       837            mov a, #3
094B 14         837            dec a
094C 1200BD     837            lcall ?Set_Cursor_2 ; Select column and row
094F D0E0       837            pop acc
0951            837   
0951 C083       838            push dph
0953 C082       838            push dpl
0955 C0E0       838            push acc
0957 900777     838            mov dptr, #Start_msg_2
095A 1200B2     838            lcall ?Send_Constant_String
095D D0E0       838            pop acc
095F D082       838            pop dpl
0961 D083       838            pop dph
0963 120655     839       lcall delay
0966 755400     840       mov tenth_seconds, #0
0969 755500     841            mov seconds, #0
096C 754500     842       mov state, #0
096F 753C3C     843       mov cool_temp, #60
0972            844   
0972            845   loop1:
0972            846   
0972            847   parameter_screen:
0972 C0E0       848            push acc
0974 7401       848            mov a, #1
0976 14         848            dec a
0977 1200BF     848            lcall ?Set_Cursor_1 ; Select column and row
097A D0E0       848            pop acc
097C            848   
097C C083       849            push dph
097E C082       849            push dpl
0980 C0E0       849            push acc
0982 900793     849            mov dptr, #Parameter_Setting_1
0985 1200B2     849            lcall ?Send_Constant_String
0988 D0E0       849            pop acc
098A D082       849            pop dpl
098C D083       849            pop dph
098E C0E0       850            push acc
0990 7401       850            mov a, #1
0992 14         850            dec a
0993 1200BD     850            lcall ?Set_Cursor_2 ; Select column and row
0996 D0E0       850            pop acc
0998 C083       851            push dph
099A C082       851            push dpl
099C C0E0       851            push acc
099E 9007A4     851            mov dptr, #Parameter_Setting_2
09A1 1200B2     851            lcall ?Send_Constant_String
09A4 D0E0       851            pop acc
09A6 D082       851            pop dpl
09A8 D083       851            pop dph
09AA 120655     852       lcall delay
09AD C0E0       853            push acc
09AF 740B       853            mov a, #11
09B1 14         853            dec a
09B2 1200BD     853            lcall ?Set_Cursor_2 ; Select column and row
09B5 D0E0       853            pop acc
09B7 C083       854            push dph
09B9 C082       854            push dpl
09BB C0E0       854            push acc
09BD 9007B5     854            mov dptr, #Loading_msg
09C0 1200B2     854            lcall ?Send_Constant_String
09C3 D0E0       854            pop acc
09C5 D082       854            pop dpl
09C7 D083       854            pop dph
09C9 120655     855       lcall delay
09CC C0E0       856            push acc
09CE 740C       856            mov a, #12
09D0 14         856            dec a
09D1 1200BD     856            lcall ?Set_Cursor_2 ; Select column and row
09D4 D0E0       856            pop acc
09D6 C083       857            push dph
09D8 C082       857            push dpl
09DA C0E0       857            push acc
09DC 9007B5     857            mov dptr, #Loading_msg
09DF 1200B2     857            lcall ?Send_Constant_String
09E2 D0E0       857            pop acc
09E4 D082       857            pop dpl
09E6 D083       857            pop dph
09E8 120655     858       lcall delay
09EB C0E0       859            push acc
09ED 740D       859            mov a, #13
09EF 14         859            dec a
09F0 1200BD     859            lcall ?Set_Cursor_2 ; Select column and row
09F3 D0E0       859            pop acc
09F5 C083       860            push dph
09F7 C082       860            push dpl
09F9 C0E0       860            push acc
09FB 9007B5     860            mov dptr, #Loading_msg
09FE 1200B2     860            lcall ?Send_Constant_String
0A01 D0E0       860            pop acc
0A03 D082       860            pop dpl
0A05 D083       860            pop dph
0A07 120655     861       lcall delay
0A0A            862   
0A0A            863   set_soak_temp:
0A0A C0E0       864            push acc
0A0C 7401       864            mov a, #1
0A0E 14         864            dec a
0A0F 1200BF     864            lcall ?Set_Cursor_1 ; Select column and row
0A12 D0E0       864            pop acc
0A14            864   
0A14 C083       865            push dph
0A16 C082       865            push dpl
0A18 C0E0       865            push acc
0A1A 9007BA     865            mov dptr, #Soak_temp_set_msg_1
0A1D 1200B2     865            lcall ?Send_Constant_String
0A20 D0E0       865            pop acc
0A22 D082       865            pop dpl
0A24 D083       865            pop dph
0A26 C0E0       866            push acc
0A28 7404       866            mov a, #4
0A2A 14         866            dec a
0A2B 1200BD     866            lcall ?Set_Cursor_2 ; Select column and row
0A2E D0E0       866            pop acc
0A30 C083       867            push dph
0A32 C082       867            push dpl
0A34 C0E0       867            push acc
0A36 9007CB     867            mov dptr, #Soak_temp_set_msg_2
0A39 1200B2     867            lcall ?Send_Constant_String
0A3C D0E0       867            pop acc
0A3E D082       867            pop dpl
0A40 D083       867            pop dph
0A42 C0E0       868            push acc
0A44 7401       868            mov a, #1
0A46 14         868            dec a
0A47 1200BD     868            lcall ?Set_Cursor_2 ; Select column and row
0A4A D0E0       868            pop acc
0A4C E538       869       mov a, soak_temp
0A4E 1205D2     870       lcall SendToLCD
0A51 20A423     871       jb INC_DEC, lock_param1
0A54 C002       871            push AR2
0A56 7A64       871            mov R2, #100
0A58 120039     871            lcall ?Wait_Milli_Seconds
0A5B D002       871            pop AR2 ; de-bounce
0A5D 20A417     871       jb INC_DEC, lock_param1
0A60 30A4FD     871       jnb INC_DEC, $
0A63 208504     871       jb SHIFT_BUTTON, skip61b
0A66 1538       871       dec soak_temp
0A68 800A       871       sjmp skip61a
0A6A            871   skip61b:
0A6A 0538       871       inc soak_temp
0A6C 0538       871       inc soak_temp
0A6E 0538       871       inc soak_temp
0A70 0538       871       inc soak_temp
0A72 0538       871       inc soak_temp
0A74            871   skip61a:
0A74 1205EE     872       lcall Save_Configuration
0A77            873   lock_param1:
0A77 208412     874       jb LOCK_PARAMETERS, check_next1
0A7A C002       875            push AR2
0A7C 7A64       875            mov R2, #100
0A7E 120039     875            lcall ?Wait_Milli_Seconds
0A81 D002       875            pop AR2
0A83 208406     876            jb LOCK_PARAMETERS, check_next1
0A86 3084FD     877            jnb LOCK_PARAMETERS, $
0A89 020C66     878       ljmp loop2
0A8C            879   check_next1:
0A8C 20A60F     880            jb NEXT_SCREEN, relay1
0A8F C002       881            push AR2
0A91 7A64       881            mov R2, #100
0A93 120039     881            lcall ?Wait_Milli_Seconds
0A96 D002       881            pop AR2
0A98 20A603     882            jb NEXT_SCREEN, relay1
0A9B 30A603     883            jnb NEXT_SCREEN, set_soak_time
0A9E            884   relay1:
0A9E 020A0A     885       ljmp set_soak_temp
0AA1            886   
0AA1            887   set_soak_time:
0AA1 C0E0       888            push acc
0AA3 7401       888            mov a, #1
0AA5 14         888            dec a
0AA6 1200BF     888            lcall ?Set_Cursor_1 ; Select column and row
0AA9 D0E0       888            pop acc
0AAB C083       889            push dph
0AAD C082       889            push dpl
0AAF C0E0       889            push acc
0AB1 9007DC     889            mov dptr, #Soak_time_set_msg_1
0AB4 1200B2     889            lcall ?Send_Constant_String
0AB7 D0E0       889            pop acc
0AB9 D082       889            pop dpl
0ABB D083       889            pop dph
0ABD C0E0       890            push acc
0ABF 7404       890            mov a, #4
0AC1 14         890            dec a
0AC2 1200BD     890            lcall ?Set_Cursor_2 ; Select column and row
0AC5 D0E0       890            pop acc
0AC7 C083       891            push dph
0AC9 C082       891            push dpl
0ACB C0E0       891            push acc
0ACD 9007ED     891            mov dptr, #Soak_time_set_msg_2
0AD0 1200B2     891            lcall ?Send_Constant_String
0AD3 D0E0       891            pop acc
0AD5 D082       891            pop dpl
0AD7 D083       891            pop dph
0AD9 C0E0       892            push acc
0ADB 7401       892            mov a, #1
0ADD 14         892            dec a
0ADE 1200BD     892            lcall ?Set_Cursor_2 ; Select column and row
0AE1 D0E0       892            pop acc
0AE3            893       ;Display_BCD(soak_time)
0AE3 E539       894       mov a, soak_time
0AE5 1205D2     895       lcall SendToLCD
0AE8 20A423     896       jb INC_DEC, lock_param2
0AEB C002       896            push AR2
0AED 7A64       896            mov R2, #100
0AEF 120039     896            lcall ?Wait_Milli_Seconds
0AF2 D002       896            pop AR2 ; de-bounce
0AF4 20A417     896       jb INC_DEC, lock_param2
0AF7 30A4FD     896       jnb INC_DEC, $
0AFA 208504     896       jb SHIFT_BUTTON, skip70b
0AFD 1539       896       dec soak_time
0AFF 800A       896       sjmp skip70a
0B01            896   skip70b:
0B01 0539       896       inc soak_time
0B03 0539       896       inc soak_time
0B05 0539       896       inc soak_time
0B07 0539       896       inc soak_time
0B09 0539       896       inc soak_time
0B0B            896   skip70a:
0B0B 1205EE     897       lcall Save_Configuration
0B0E            898   lock_param2:
0B0E 208412     899       jb LOCK_PARAMETERS, check_next2
0B11 C002       900            push AR2
0B13 7A64       900            mov R2, #100
0B15 120039     900            lcall ?Wait_Milli_Seconds
0B18 D002       900            pop AR2
0B1A 208406     901            jb LOCK_PARAMETERS, check_next2
0B1D 3084FD     902            jnb LOCK_PARAMETERS, $
0B20 020C66     903       ljmp loop2
0B23            904   check_next2:
0B23 20A60F     905            jb NEXT_SCREEN, relay2
0B26 C002       906            push AR2
0B28 7A64       906            mov R2, #100
0B2A 120039     906            lcall ?Wait_Milli_Seconds
0B2D D002       906            pop AR2
0B2F 20A603     907            jb NEXT_SCREEN, relay2
0B32 30A603     908            jnb NEXT_SCREEN, set_refl_temp
0B35            909   relay2:
0B35 020AA1     910       ljmp set_soak_time
0B38            911   
0B38            912   set_refl_temp:
0B38 C0E0       913            push acc
0B3A 7401       913            mov a, #1
0B3C 14         913            dec a
0B3D 1200BF     913            lcall ?Set_Cursor_1 ; Select column and row
0B40 D0E0       913            pop acc
0B42 C083       914            push dph
0B44 C082       914            push dpl
0B46 C0E0       914            push acc
0B48 9007FE     914            mov dptr, #Refl_temp_set_msg_1
0B4B 1200B2     914            lcall ?Send_Constant_String
0B4E D0E0       914            pop acc
0B50 D082       914            pop dpl
0B52 D083       914            pop dph
0B54 C0E0       915            push acc
0B56 7404       915            mov a, #4
0B58 14         915            dec a
0B59 1200BD     915            lcall ?Set_Cursor_2 ; Select column and row
0B5C D0E0       915            pop acc
0B5E C083       916            push dph
0B60 C082       916            push dpl
0B62 C0E0       916            push acc
0B64 90080F     916            mov dptr, #Refl_temp_set_msg_2
0B67 1200B2     916            lcall ?Send_Constant_String
0B6A D0E0       916            pop acc
0B6C D082       916            pop dpl
0B6E D083       916            pop dph
0B70 C0E0       917            push acc
0B72 7401       917            mov a, #1
0B74 14         917            dec a
0B75 1200BD     917            lcall ?Set_Cursor_2 ; Select column and row
0B78 D0E0       917            pop acc
0B7A E53A       918       mov a, refl_temp
0B7C 1205D2     919       lcall SendToLCD
0B7F 20A423     920       jb INC_DEC, lock_param3
0B82 C002       920            push AR2
0B84 7A64       920            mov R2, #100
0B86 120039     920            lcall ?Wait_Milli_Seconds
0B89 D002       920            pop AR2 ; de-bounce
0B8B 20A417     920       jb INC_DEC, lock_param3
0B8E 30A4FD     920       jnb INC_DEC, $
0B91 208504     920       jb SHIFT_BUTTON, skip79b
0B94 153A       920       dec refl_temp
0B96 800A       920       sjmp skip79a
0B98            920   skip79b:
0B98 053A       920       inc refl_temp
0B9A 053A       920       inc refl_temp
0B9C 053A       920       inc refl_temp
0B9E 053A       920       inc refl_temp
0BA0 053A       920       inc refl_temp
0BA2            920   skip79a:
0BA2 1205EE     921       lcall Save_Configuration
0BA5            922   lock_param3:
0BA5 208412     923       jb LOCK_PARAMETERS, check_next3
0BA8 C002       924            push AR2
0BAA 7A64       924            mov R2, #100
0BAC 120039     924            lcall ?Wait_Milli_Seconds
0BAF D002       924            pop AR2
0BB1 208406     925            jb LOCK_PARAMETERS, check_next3
0BB4 3084FD     926            jnb LOCK_PARAMETERS, $
0BB7 020C66     927       ljmp loop2
0BBA            928   check_next3:
0BBA 20A60F     929            jb NEXT_SCREEN, relay3
0BBD C002       930            push AR2
0BBF 7A64       930            mov R2, #100
0BC1 120039     930            lcall ?Wait_Milli_Seconds
0BC4 D002       930            pop AR2
0BC6 20A603     931            jb NEXT_SCREEN, relay3
0BC9 30A603     932            jnb NEXT_SCREEN, set_refl_time
0BCC            933   relay3:
0BCC 020B38     934       ljmp set_refl_temp
0BCF            935   
0BCF            936   set_refl_time:
0BCF C0E0       937            push acc
0BD1 7401       937            mov a, #1
0BD3 14         937            dec a
0BD4 1200BF     937            lcall ?Set_Cursor_1 ; Select column and row
0BD7 D0E0       937            pop acc
0BD9 C083       938            push dph
0BDB C082       938            push dpl
0BDD C0E0       938            push acc
0BDF 900820     938            mov dptr, #Refl_time_set_msg_1
0BE2 1200B2     938            lcall ?Send_Constant_String
0BE5 D0E0       938            pop acc
0BE7 D082       938            pop dpl
0BE9 D083       938            pop dph
0BEB C0E0       939            push acc
0BED 7404       939            mov a, #4
0BEF 14         939            dec a
0BF0 1200BD     939            lcall ?Set_Cursor_2 ; Select column and row
0BF3 D0E0       939            pop acc
0BF5 C083       940            push dph
0BF7 C082       940            push dpl
0BF9 C0E0       940            push acc
0BFB 900831     940            mov dptr, #Refl_time_set_msg_2
0BFE 1200B2     940            lcall ?Send_Constant_String
0C01 D0E0       940            pop acc
0C03 D082       940            pop dpl
0C05 D083       940            pop dph
0C07 C0E0       941            push acc
0C09 7401       941            mov a, #1
0C0B 14         941            dec a
0C0C 1200BD     941            lcall ?Set_Cursor_2 ; Select column and row
0C0F D0E0       941            pop acc
0C11 E53B       942       mov a, refl_time
0C13 1205D2     943       lcall SendToLCD
0C16 20A423     944       jb INC_DEC, lock_param4
0C19 C002       944            push AR2
0C1B 7A64       944            mov R2, #100
0C1D 120039     944            lcall ?Wait_Milli_Seconds
0C20 D002       944            pop AR2 ; de-bounce
0C22 20A417     944       jb INC_DEC, lock_param4
0C25 30A4FD     944       jnb INC_DEC, $
0C28 208504     944       jb SHIFT_BUTTON, skip88b
0C2B 153B       944       dec refl_time
0C2D 800A       944       sjmp skip88a
0C2F            944   skip88b:
0C2F 053B       944       inc refl_time
0C31 053B       944       inc refl_time
0C33 053B       944       inc refl_time
0C35 053B       944       inc refl_time
0C37 053B       944       inc refl_time
0C39            944   skip88a:
0C39 1205EE     945       lcall Save_Configuration
0C3C            946   lock_param4:
0C3C 20840F     947       jb LOCK_PARAMETERS, check_next4
0C3F C002       948            push AR2
0C41 7A64       948            mov R2, #100
0C43 120039     948            lcall ?Wait_Milli_Seconds
0C46 D002       948            pop AR2
0C48 208403     949            jb LOCK_PARAMETERS, check_next4
0C4B 308418     950            jnb LOCK_PARAMETERS, loop2
0C4E            951   check_next4:
0C4E 20A60F     952            jb NEXT_SCREEN, relay4
0C51 C002       953            push AR2
0C53 7A64       953            mov R2, #100
0C55 120039     953            lcall ?Wait_Milli_Seconds
0C58 D002       953            pop AR2
0C5A 20A603     954            jb NEXT_SCREEN, relay4
0C5D 30A603     955            jnb NEXT_SCREEN, relay5
0C60            956   relay4:
0C60 020BCF     957       ljmp set_refl_time
0C63            958   
0C63            959   relay5:
0C63 020A0A     960       ljmp set_soak_temp
0C66            961   
0C66            962   
0C66            963   ;-------------------------------------------;
0C66            964   ;         Confirmation before FSM           ;
0C66            965   ;-------------------------------------------;
0C66            966   loop2:
0C66 C0E0       967            push acc
0C68 7401       967            mov a, #1
0C6A 14         967            dec a
0C6B 1200BF     967            lcall ?Set_Cursor_1 ; Select column and row
0C6E D0E0       967            pop acc
0C70 C083       968            push dph
0C72 C082       968            push dpl
0C74 C0E0       968            push acc
0C76 900853     968            mov dptr, #Confirmation_msg
0C79 1200B2     968            lcall ?Send_Constant_String
0C7C D0E0       968            pop acc
0C7E D082       968            pop dpl
0C80 D083       968            pop dph
0C82 C0E0       969            push acc
0C84 7401       969            mov a, #1
0C86 14         969            dec a
0C87 1200BD     969            lcall ?Set_Cursor_2 ; Select column and row
0C8A D0E0       969            pop acc
0C8C E538       970       mov a, soak_temp
0C8E 1205D2     971       lcall SendToLCD
0C91 C0E0       972            push acc
0C93 7405       972            mov a, #5
0C95 14         972            dec a
0C96 1200BD     972            lcall ?Set_Cursor_2 ; Select column and row
0C99 D0E0       972            pop acc
0C9B E539       973       mov a, soak_time
0C9D 1205D2     974       lcall SendToLCD
0CA0 C0E0       975            push acc
0CA2 7409       975            mov a, #9
0CA4 14         975            dec a
0CA5 1200BD     975            lcall ?Set_Cursor_2 ; Select column and row
0CA8 D0E0       975            pop acc
0CAA E53A       976       mov a, refl_temp
0CAC 1205D2     977       lcall SendToLCD
0CAF C0E0       978            push acc
0CB1 740D       978            mov a, #13
0CB3 14         978            dec a
0CB4 1200BD     978            lcall ?Set_Cursor_2 ; Select column and row
0CB7 D0E0       978            pop acc
0CB9 E53B       979       mov a, refl_time
0CBB 1205D2     980       lcall SendToLCD
0CBE            981       
0CBE 20840F     982       jb LOCK_PARAMETERS, dont_start_FSM
0CC1 C002       983            push AR2
0CC3 7A64       983            mov R2, #100
0CC5 120039     983            lcall ?Wait_Milli_Seconds
0CC8 D002       983            pop AR2
0CCA 208403     984            jb LOCK_PARAMETERS, dont_start_FSM
0CCD 308403     985            jnb LOCK_PARAMETERS, start_FSM
0CD0            986   dont_start_FSM:
0CD0 020C66     987       ljmp loop2
0CD3            988   
0CD3            989   start_FSM:
0CD3            990       ;lcall delay
0CD3 8000       991       sjmp MainProgram2
0CD5            992   
0CD5            993   ;-------------------------------------------;
0CD5            994   ;         Finite State Machine              ;
0CD5            995   ;-------------------------------------------;
0CD5            996   MainProgram2:
0CD5            997       ; Initialization
0CD5            998       ;mov SP, #7FH ; Set the stack pointer to the begining of idata
0CD5 120499     999       lcall Timer2_Init
0CD8 12034A    1000       lcall Timer1_Init
0CDB           1001       ;lcall LCD_4bit ; initialized above in parameter selection
0CDB 120555    1002       lcall InitSerialPort
0CDE           1003   
0CDE 755400    1004       mov tenth_seconds, #0
0CE1 755500    1005            mov seconds, #0
0CE4 754500    1006       mov state, #0
0CE7 755600    1007       mov sound_seconds, #0
0CEA           1008       
0CEA C204      1009       clr state_1_sound_flag
0CEC C205      1010       clr state_2_sound_flag 
0CEE C206      1011       clr state_3_sound_flag 
0CF0 C207      1012       clr state_4_sound_flag 
0CF2 C208      1013       clr state_5_sound_flag 
0CF4 C203      1014       clr fivesecondsflag 
0CF6           1015   
0CF6 853930    1016       mov x+0, soak_time 
0CF9 753100    1017       mov x+1, #0
0CFC 753200    1018       mov x+2, #0
0CFF 753300    1019       mov x+3, #0
0D02           1020   
0D02 1200DA    1021       lcall hex2bcd
0D05 854639    1022       mov soak_time, BCD
0D08           1023   
0D08           1024   
0D08 853B30    1025       mov x+0, refl_time 
0D0B 753100    1026       mov x+1, #0
0D0E 753200    1027       mov x+2, #0
0D11 753300    1028       mov x+3, #0
0D14           1029   
0D14 1200DA    1030       lcall hex2bcd
0D17 85463B    1031       mov refl_time, BCD
0D1A           1032   
0D1A           1033   
0D1A D2AF      1034       setb EA   ; Enable Global interrupts
0D1C           1035       
0D1C C0E0      1036            push acc
0D1E 7401      1036            mov a, #1
0D20 14        1036            dec a
0D21 1200BD    1036            lcall ?Set_Cursor_2 ; Select column and row
0D24 D0E0      1036            pop acc
0D26 C083      1037            push dph
0D28 C082      1037            push dpl
0D2A C0E0      1037            push acc
0D2C 900864    1037            mov dptr, #TEMPERATURE_MESSAGE
0D2F 1200B2    1037            lcall ?Send_Constant_String
0D32 D0E0      1037            pop acc
0D34 D082      1037            pop dpl
0D36 D083      1037            pop dph
0D38 C0E0      1038            push acc
0D3A 7401      1038            mov a, #1
0D3C 14        1038            dec a
0D3D 1200BF    1038            lcall ?Set_Cursor_1 ; Select column and row
0D40 D0E0      1038            pop acc
0D42 C083      1039            push dph
0D44 C082      1039            push dpl
0D46 C0E0      1039            push acc
0D48 900882    1039            mov dptr, #msg_state_0
0D4B 1200B2    1039            lcall ?Send_Constant_String
0D4E D0E0      1039            pop acc
0D50 D082      1039            pop dpl
0D52 D083      1039            pop dph
0D54           1040   
0D54 120537    1041       lcall INIT_SPI
0D57           1042   
0D57           1043   forever:
0D57           1044   
0D57 208315    1045       jb ABORT_BUTTON, NoAbort
0D5A C002      1046            push AR2
0D5C 7A32      1046            mov R2, #50
0D5E 120039    1046            lcall ?Wait_Milli_Seconds
0D61 D002      1046            pop AR2
0D63 208309    1047            jb ABORT_BUTTON, NoAbort
0D66 3083FD    1048            jnb ABORT_BUTTON, $
0D69 754506    1049       mov state, #6
0D6C 02105D    1050       ljmp abort
0D6F           1051   
0D6F           1052       NoAbort:
0D6F 30015F    1053       jnb tenth_seconds_flag, state0 
0D72           1054   
0D72 75F000    1055       mov b, #0
0D75 12059C    1055       lcall _Read_ADC_Channel
0D78 1206A1    1056       lcall Do_Something_With_Result
0D7B           1057   
0D7B 8F4C      1058       mov channel_0_voltage+1, R7 ;low
0D7D 8E4B      1059       mov channel_0_voltage+0, R6 ;High
0D7F           1060       
0D7F C201      1061       clr tenth_seconds_flag
0D81           1062   
0D81 E545      1063       mov a, state
0D83 B40603    1064       cjne a, #0x06, Display
0D86 020DB8    1065           ljmp NoDisplay
0D89           1066   
0D89           1067       Display:
0D89 C0E0      1068            push acc
0D8B 740C      1068            mov a, #12
0D8D 14        1068            dec a
0D8E 1200BD    1068            lcall ?Set_Cursor_2 ; Select column and row
0D91 D0E0      1068            pop acc
0D93 C083      1069            push dph
0D95 C082      1069            push dpl
0D97 C0E0      1069            push acc
0D99 900870    1069            mov dptr, #TIME_MESSAGE
0D9C 1200B2    1069            lcall ?Send_Constant_String
0D9F D0E0      1069            pop acc
0DA1 D082      1069            pop dpl
0DA3 D083      1069            pop dph
0DA5 C0E0      1070            push acc
0DA7 740E      1070            mov a, #14
0DA9 14        1070            dec a
0DAA 1200BD    1070            lcall ?Set_Cursor_2 ; Select column and row
0DAD D0E0      1070            pop acc
0DAF           1070   
0DAF C000      1071            push ar0
0DB1 A855      1071            mov r0, seconds
0DB3 1200C4    1071            lcall ?Display_BCD
0DB6 D000      1071            pop ar0
0DB8           1072       NoDisplay:
0DB8 300316    1073       jnb fivesecondsflag, state0
0DBB           1074               ;mov a, temp_result
0DBB           1075               ;add a, #0x05
0DBB 854146    1076                            mov bcd + 0, temp_pass_result + 0
0DBE 854247    1077               mov bcd + 1, temp_pass_result + 1
0DC1 854348    1078               mov bcd + 2, temp_pass_result + 2
0DC4 854449    1079               mov bcd + 3, temp_pass_result + 3
0DC7 1203BC    1080            lcall ?Play_Sound
0DCA C203      1081               clr fivesecondsflag            
0DCC 8003      1082                            sjmp state0
0DCE           1083   
0DCE           1084   
0DCE 020DD1    1085       ljmp state0
0DD1           1086   
0DD1           1087   state0: ;Idle
0DD1 E545      1088       mov a, state
0DD3 B40046    1089       cjne a, #0, state1
0DD6           1090   
0DD6 755700    1091       mov PowerPercent, #0
0DD9 20A434    1092       jb INC_DEC, state0_done
0DDC C002      1093            push AR2
0DDE 7A32      1093            mov R2, #50
0DE0 120039    1093            lcall ?Wait_Milli_Seconds
0DE3 D002      1093            pop AR2
0DE5 20A428    1094            jb INC_DEC, state0_done
0DE8 30A4FD    1095            jnb INC_DEC, $
0DEB           1096   
0DEB           1097       ;State Transition from 0 -> 1
0DEB C0E0      1098            push acc
0DED 7401      1098            mov a, #1
0DEF 14        1098            dec a
0DF0 1200BF    1098            lcall ?Set_Cursor_1 ; Select column and row
0DF3 D0E0      1098            pop acc
0DF5           1098   
0DF5 C083      1099            push dph
0DF7 C082      1099            push dpl
0DF9 C0E0      1099            push acc
0DFB 900893    1099            mov dptr, #msg_state_1
0DFE 1200B2    1099            lcall ?Send_Constant_String
0E01 D0E0      1099            pop acc
0E03 D082      1099            pop dpl
0E05 D083      1099            pop dph
0E07 755500    1100       mov seconds, #0
0E0A 754501    1101       mov state, #1
0E0D 75570A    1102       mov PowerPercent, #0x0A
0E10           1103       
0E10           1104   state0_done:
0E10 020D57    1105       ljmp forever
0E13           1106       
0E13           1107   
0E13           1108   GoToState2:
0E13 020EB4    1109       ljmp state2
0E16           1110   GoToAbort:
0E16 754506    1111       mov state, #6
0E19 02105D    1112       ljmp abort
0E1C           1113   state1: ;ramp to soak
0E1C E545      1114       mov a, state
0E1E B401F2    1115       cjne a, #1, GoToState2
0E21           1116   
0E21           1117   
0E21 753080    1118       mov x+0, #0x80
0E24 753100    1119       mov x+1, #0
0E27 753200    1120       mov x+2, #0
0E2A 753300    1121       mov x+3, #0
0E2D           1122   
0E2D 855534    1123       mov y+0, seconds + 0
0E30 753500    1124       mov y+1, #0
0E33 753600    1125       mov y+2, #0
0E36 753700    1126       mov y+3, #0
0E39           1127   
0E39 1201E2    1128       lcall x_lt_y
0E3C 2000D7    1129       jb mf, GoToAbort ;jump to aborted state
0E3F           1130   
0E3F           1131   
0E3F           1132   
0E3F 853830    1133       mov x+0, soak_temp + 0
0E42 753100    1134       mov x+1, #0
0E45 753200    1135       mov x+2, #0
0E48 753300    1136       mov x+3, #0
0E4B           1137   
0E4B 853D34    1138       mov y+0, temp_result + 0
0E4E 853E35    1139       mov y+1, temp_result + 1
0E51 853F36    1140       mov y+2, temp_result + 2
0E54 854037    1141       mov y+3, temp_result + 3
0E57           1142   
0E57 1201E2    1143       lcall x_lt_y
0E5A 300054    1144       jnb mf, state1_done
0E5D           1145   
0E5D           1146       ;State Transition from 1 -> 2
0E5D C0E0      1147            push acc
0E5F 7401      1147            mov a, #1
0E61 14        1147            dec a
0E62 1200BF    1147            lcall ?Set_Cursor_1 ; Select column and row
0E65 D0E0      1147            pop acc
0E67           1147   
0E67 C083      1148            push dph
0E69 C082      1148            push dpl
0E6B C0E0      1148            push acc
0E6D 9008A4    1148            mov dptr, #msg_state_2
0E70 1200B2    1148            lcall ?Send_Constant_String
0E73 D0E0      1148            pop acc
0E75 D082      1148            pop dpl
0E77 D083      1148            pop dph
0E79 C0E0      1149            push acc
0E7B 740C      1149            mov a, #12
0E7D 14        1149            dec a
0E7E 1200BD    1149            lcall ?Set_Cursor_2 ; Select column and row
0E81 D0E0      1149            pop acc
0E83 C083      1150            push dph
0E85 C082      1150            push dpl
0E87 C0E0      1150            push acc
0E89 900870    1150            mov dptr, #TIME_MESSAGE
0E8C 1200B2    1150            lcall ?Send_Constant_String
0E8F D0E0      1150            pop acc
0E91 D082      1150            pop dpl
0E93 D083      1150            pop dph
0E95 C0E0      1151            push acc
0E97 740E      1151            mov a, #14
0E99 14        1151            dec a
0E9A 1200BD    1151            lcall ?Set_Cursor_2 ; Select column and row
0E9D D0E0      1151            pop acc
0E9F           1151   
0E9F C000      1152            push ar0
0EA1 A855      1152            mov r0, seconds
0EA3 1200C4    1152            lcall ?Display_BCD
0EA6 D000      1152            pop ar0
0EA8 755701    1153       mov PowerPercent, #0x01
0EAB 755500    1154       mov seconds, #0
0EAE 754502    1155       mov state, #2
0EB1           1156   state1_done:
0EB1 0210AE    1157       ljmp FSM2
0EB4           1158   
0EB4           1159   state2: ;soak
0EB4 E545      1160       mov a, state
0EB6 B4025F    1161       cjne a, #2, state3
0EB9           1162   
0EB9           1163    
0EB9 853930    1164       mov x+0, soak_time
0EBC 753100    1165       mov x+1, #0
0EBF 753200    1166       mov x+2, #0
0EC2 753300    1167       mov x+3, #0
0EC5           1168   
0EC5 855534    1169       mov y+0, seconds + 0
0EC8 753500    1170       mov y+1, #0
0ECB 753600    1171       mov y+2, #0
0ECE 753700    1172       mov y+3, #0
0ED1           1173   
0ED1 1201E2    1174       lcall x_lt_y
0ED4 30003E    1175       jnb mf, state2_done
0ED7           1176   
0ED7           1177       ;State transition from 2 -> 3
0ED7 C0E0      1178            push acc
0ED9 7401      1178            mov a, #1
0EDB 14        1178            dec a
0EDC 1200BF    1178            lcall ?Set_Cursor_1 ; Select column and row
0EDF D0E0      1178            pop acc
0EE1           1178   
0EE1 C083      1179            push dph
0EE3 C082      1179            push dpl
0EE5 C0E0      1179            push acc
0EE7 9008B5    1179            mov dptr, #msg_state_3
0EEA 1200B2    1179            lcall ?Send_Constant_String
0EED D0E0      1179            pop acc
0EEF D082      1179            pop dpl
0EF1 D083      1179            pop dph
0EF3 C0E0      1180            push acc
0EF5 740C      1180            mov a, #12
0EF7 14        1180            dec a
0EF8 1200BD    1180            lcall ?Set_Cursor_2 ; Select column and row
0EFB D0E0      1180            pop acc
0EFD C083      1181            push dph
0EFF C082      1181            push dpl
0F01 C0E0      1181            push acc
0F03 90087C    1181            mov dptr, #seconds_dont_matter
0F06 1200B2    1181            lcall ?Send_Constant_String
0F09 D0E0      1181            pop acc
0F0B D082      1181            pop dpl
0F0D D083      1181            pop dph
0F0F 75570A    1182       mov PowerPercent, #0x0A
0F12 754503    1183       mov state, #3
0F15           1184   state2_done:
0F15 0210AE    1185       ljmp FSM2
0F18           1186     
0F18           1187   state3: ;ramp to reflow
0F18 E545      1188       mov a, state
0F1A B40375    1189       cjne a, #3, state4
0F1D           1190   
0F1D 853A30    1191       mov x+0, refl_temp + 0
0F20 753100    1192       mov x+1, #0
0F23 753200    1193       mov x+2, #0
0F26 753300    1194       mov x+3, #0
0F29           1195   
0F29 853D34    1196       mov y+0, temp_result + 0
0F2C 853E35    1197       mov y+1, temp_result + 1
0F2F 853F36    1198       mov y+2, temp_result + 2
0F32 854037    1199       mov y+3, temp_result + 3
0F35           1200   
0F35 1201E2    1201       lcall x_lt_y
0F38 300054    1202       jnb mf, state3_done
0F3B           1203   
0F3B           1204       ;State transition from 3 -> 4
0F3B C0E0      1205            push acc
0F3D 7401      1205            mov a, #1
0F3F 14        1205            dec a
0F40 1200BF    1205            lcall ?Set_Cursor_1 ; Select column and row
0F43 D0E0      1205            pop acc
0F45 C083      1206            push dph
0F47 C082      1206            push dpl
0F49 C0E0      1206            push acc
0F4B 9008C6    1206            mov dptr, #msg_state_4
0F4E 1200B2    1206            lcall ?Send_Constant_String
0F51 D0E0      1206            pop acc
0F53 D082      1206            pop dpl
0F55 D083      1206            pop dph
0F57 C0E0      1207            push acc
0F59 740C      1207            mov a, #12
0F5B 14        1207            dec a
0F5C 1200BD    1207            lcall ?Set_Cursor_2 ; Select column and row
0F5F D0E0      1207            pop acc
0F61 C083      1208            push dph
0F63 C082      1208            push dpl
0F65 C0E0      1208            push acc
0F67 900870    1208            mov dptr, #TIME_MESSAGE
0F6A 1200B2    1208            lcall ?Send_Constant_String
0F6D D0E0      1208            pop acc
0F6F D082      1208            pop dpl
0F71 D083      1208            pop dph
0F73 C0E0      1209            push acc
0F75 740E      1209            mov a, #14
0F77 14        1209            dec a
0F78 1200BD    1209            lcall ?Set_Cursor_2 ; Select column and row
0F7B D0E0      1209            pop acc
0F7D           1209   
0F7D C000      1210            push ar0
0F7F A855      1210            mov r0, seconds
0F81 1200C4    1210            lcall ?Display_BCD
0F84 D000      1210            pop ar0
0F86 755500    1211       mov Seconds, #0
0F89 755702    1212       mov PowerPercent, #0x02
0F8C 754504    1213       mov state, #4
0F8F           1214   state3_done:
0F8F 0210AE    1215       ljmp FSM2
0F92           1216     
0F92           1217   state4: ;reflow
0F92 E545      1218       mov a, state
0F94 B4045F    1219       cjne a, #4, state5
0F97           1220   
0F97 853B30    1221       mov x+0, refl_time + 0
0F9A 753100    1222       mov x+1, #0
0F9D 753200    1223       mov x+2, #0
0FA0 753300    1224       mov x+3, #0
0FA3           1225   
0FA3 855534    1226       mov y+0, seconds + 0
0FA6 753500    1227       mov y+1, #0
0FA9 753600    1228       mov y+2, #0
0FAC 753700    1229       mov y+3, #0
0FAF           1230   
0FAF 1201E2    1231       lcall x_lt_y
0FB2 30003E    1232       jnb mf, state4_done
0FB5           1233   
0FB5           1234       ;State transition from 4 -> 5
0FB5 C0E0      1235            push acc
0FB7 7401      1235            mov a, #1
0FB9 14        1235            dec a
0FBA 1200BF    1235            lcall ?Set_Cursor_1 ; Select column and row
0FBD D0E0      1235            pop acc
0FBF           1235   
0FBF C083      1236            push dph
0FC1 C082      1236            push dpl
0FC3 C0E0      1236            push acc
0FC5 9008D7    1236            mov dptr, #msg_state_5
0FC8 1200B2    1236            lcall ?Send_Constant_String
0FCB D0E0      1236            pop acc
0FCD D082      1236            pop dpl
0FCF D083      1236            pop dph
0FD1 C0E0      1237            push acc
0FD3 740C      1237            mov a, #12
0FD5 14        1237            dec a
0FD6 1200BD    1237            lcall ?Set_Cursor_2 ; Select column and row
0FD9 D0E0      1237            pop acc
0FDB C083      1238            push dph
0FDD C082      1238            push dpl
0FDF C0E0      1238            push acc
0FE1 90087C    1238            mov dptr, #seconds_dont_matter
0FE4 1200B2    1238            lcall ?Send_Constant_String
0FE7 D0E0      1238            pop acc
0FE9 D082      1238            pop dpl
0FEB D083      1238            pop dph
0FED 755700    1239       mov PowerPercent, #0x00    
0FF0 754505    1240       mov state, #5
0FF3           1241   state4_done:
0FF3 0210AE    1242       ljmp FSM2
0FF6           1243     
0FF6           1244   state5: ;cool
0FF6 E545      1245       mov a, state
0FF8 B4055F    1246       cjne a, #5, GoToState6
0FFB           1247   
0FFB C0E0      1248            push acc
0FFD 740C      1248            mov a, #12
0FFF 14        1248            dec a
1000 1200BD    1248            lcall ?Set_Cursor_2 ; Select column and row
1003 D0E0      1248            pop acc
1005 C083      1249            push dph
1007 C082      1249            push dpl
1009 C0E0      1249            push acc
100B 90087C    1249            mov dptr, #seconds_dont_matter
100E 1200B2    1249            lcall ?Send_Constant_String
1011 D0E0      1249            pop acc
1013 D082      1249            pop dpl
1015 D083      1249            pop dph
1017           1250   
1017 853C30    1251       mov x+0, cool_temp + 0
101A 753100    1252       mov x+1, #0
101D 753200    1253       mov x+2, #0
1020 753300    1254       mov x+3, #0
1023           1255   
1023 853D34    1256       mov y+0, temp_result + 0
1026 853E35    1257       mov y+1, temp_result + 1
1029 853F36    1258       mov y+2, temp_result + 2
102C 854037    1259       mov y+3, temp_result + 3
102F           1260   
102F 1201FE    1261       lcall x_gt_y
1032 300022    1262       jnb mf, state5_done
1035           1263   
1035           1264       ;State transition from 5 -> 0
1035 C0E0      1265            push acc
1037 7401      1265            mov a, #1
1039 14        1265            dec a
103A 1200BF    1265            lcall ?Set_Cursor_1 ; Select column and row
103D D0E0      1265            pop acc
103F C083      1266            push dph
1041 C082      1266            push dpl
1043 C0E0      1266            push acc
1045 900882    1266            mov dptr, #msg_state_0
1048 1200B2    1266            lcall ?Send_Constant_String
104B D0E0      1266            pop acc
104D D082      1266            pop dpl
104F D083      1266            pop dph
1051 754500    1267       mov state, #0
1054 755700    1268       mov PowerPercent, #0x00
1057           1269   
1057           1270   state5_done:
1057 0210AE    1271       ljmp FSM2
105A           1272   
105A           1273   GoToState6:
105A 02109E    1274       ljmp state6
105D           1275   
105D           1276   abort:
105D 755500    1277       mov seconds, #0
1060 754506    1278       mov state, #6
1063 755700    1279       mov PowerPercent, #0x00
1066 C0E0      1280            push acc
1068 7401      1280            mov a, #1
106A 14        1280            dec a
106B 1200BF    1280            lcall ?Set_Cursor_1 ; Select column and row
106E D0E0      1280            pop acc
1070           1280   
1070 C083      1281            push dph
1072 C082      1281            push dpl
1074 C0E0      1281            push acc
1076 9008E8    1281            mov dptr, #msg_abort_1
1079 1200B2    1281            lcall ?Send_Constant_String
107C D0E0      1281            pop acc
107E D082      1281            pop dpl
1080 D083      1281            pop dph
1082 C0E0      1282            push acc
1084 7401      1282            mov a, #1
1086 14        1282            dec a
1087 1200BD    1282            lcall ?Set_Cursor_2 ; Select column and row
108A D0E0      1282            pop acc
108C           1282   
108C C083      1283            push dph
108E C082      1283            push dpl
1090 C0E0      1283            push acc
1092 9008F9    1283            mov dptr, #msg_abort_2
1095 1200B2    1283            lcall ?Send_Constant_String
1098 D0E0      1283            pop acc
109A D082      1283            pop dpl
109C D083      1283            pop dph
109E           1284   state6: ;ABORTED
109E E545      1285       mov a, state
10A0 B40608    1286       cjne a, #6, state6_done
10A3           1287   
10A3 8006      1288       sjmp state6_done
10A5           1289       ;State transition from 6 -> 0
10A5 755700    1290       mov PowerPercent, #0x00    
10A8 754500    1291       mov state, #0
10AB           1292   
10AB           1293   state6_done:
10AB 020D57    1294       ljmp forever
10AE           1295   
10AE           1296   ;; THIS IS WHERE SOUND WILL GO
10AE           1297   FSM2:
10AE E545      1298            mov a, state
10B0           1299   state_1_sound:
10B0 B40117    1300            cjne a, #0x1, state_2_sound
10B3 20047C    1301            jb state_1_sound_flag,check_5_seconds 
10B6 753004    1302            mov x+0, #low (260 % 0x10000) 
10B9 753101    1302            mov x+1, #high(260 % 0x10000) 
10BC 753200    1302            mov x+2, #low (260 / 0x10000) 
10BF 753300    1302            mov x+3, #high(260 / 0x10000) 
10C2 120407    1303            lcall ?State_Sound
10C5 D204      1304            setb state_1_sound_flag
10C7 021132    1305            ljmp no_sound
10CA           1306   state_2_sound:
10CA B40217    1307            cjne a, #0x2, state_3_sound
10CD 200562    1308            jb state_2_sound_flag,check_5_seconds 
10D0 75301D    1309            mov x+0, #low (285 % 0x10000) 
10D3 753101    1309            mov x+1, #high(285 % 0x10000) 
10D6 753200    1309            mov x+2, #low (285 / 0x10000) 
10D9 753300    1309            mov x+3, #high(285 / 0x10000) 
10DC 120407    1310            lcall ?State_Sound
10DF D205      1311            setb state_2_sound_flag
10E1 021132    1312            ljmp no_sound
10E4           1313   state_3_sound:
10E4 B40317    1314            cjne a, #0x3, state_4_sound
10E7 200648    1315            jb state_3_sound_flag,check_5_seconds 
10EA 753009    1316            mov x+0, #low (265 % 0x10000) 
10ED 753101    1316            mov x+1, #high(265 % 0x10000) 
10F0 753200    1316            mov x+2, #low (265 / 0x10000) 
10F3 753300    1316            mov x+3, #high(265 / 0x10000) 
10F6 120407    1317            lcall ?State_Sound
10F9 D206      1318            setb state_3_sound_flag
10FB 021132    1319            ljmp no_sound
10FE           1320   state_4_sound:
10FE B40417    1321            cjne a, #0x4, state_5_sound
1101 20072E    1322            jb state_4_sound_flag,check_5_seconds 
1104 75300E    1323            mov x+0, #low (270 % 0x10000) 
1107 753101    1323            mov x+1, #high(270 % 0x10000) 
110A 753200    1323            mov x+2, #low (270 / 0x10000) 
110D 753300    1323            mov x+3, #high(270 / 0x10000) 
1110 120407    1324            lcall ?State_Sound
1113 D207      1325            setb state_4_sound_flag
1115 021132    1326            ljmp no_sound
1118           1327   state_5_sound:
1118 B40517    1328            cjne a, #0x5, no_sound
111B 200814    1329            jb state_5_sound_flag,check_5_seconds 
111E 753013    1330            mov x+0, #low (275 % 0x10000) 
1121 753101    1330            mov x+1, #high(275 % 0x10000) 
1124 753200    1330            mov x+2, #low (275 / 0x10000) 
1127 753300    1330            mov x+3, #high(275 / 0x10000) 
112A 120407    1331            lcall ?State_Sound
112D D208      1332            setb state_5_sound_flag
112F 021132    1333            ljmp no_sound
1132           1334            
1132           1335   check_5_seconds:
1132           1336            ;jb TR1, no_sound
1132           1337            ;jc check_with_carry_set
1132           1338       ;mov a, seconds
1132           1339            ;mov b, #0x5
1132           1340            ;div ab
1132           1341            ;mov a, b
1132           1342            ;cjne a, #0x0, no_sound
1132           1343       
1132           1344            
1132           1345            ;check_with_carry_set:
1132           1346                    ;mov a, seconds
1132           1347                    ;mov b, #0x5
1132           1348                    ;div ab
1132           1349                    ;setb c
1132           1350                    ;mov a, b
1132           1351                    ;cjne a, #0x0, no_sound
1132           1352                            ;mov a, tenth_seconds
1132           1353                            ;cjne a, #0x0, no_sound
1132           1354                                    ;mov bcd, temp_result
1132           1355                                    ;play_sound
1132           1356            
1132           1357            no_sound:
1132 020D57    1358            ljmp forever
1135           1359   
1135           1360   EN
